/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class FilterScopesBuilder {
    constructor() {
        this.fillScope = undefined;
        this.defaultScope = undefined;
    }
    fill({ apply }) {
        this.fillScope = {
            $type: 'Relewise.Client.Requests.Filters.Settings.ApplyFilterSettings, Relewise.Client',
            apply,
        };
        return this;
    }
    default({ apply }) {
        this.defaultScope = {
            $type: 'Relewise.Client.Requests.Filters.Settings.ApplyFilterSettings, Relewise.Client',
            apply,
        };
        return this;
    }
    build() {
        return this.fillScope || this.defaultScope
            ? {
                fill: this.fillScope,
                default: this.defaultScope,
            }
            : null;
    }
}

class FilterSettingsBuilder {
    constructor() {
        this.scopesBuilder = new FilterScopesBuilder();
    }
    scopes(builder) {
        builder(this.scopesBuilder);
        return this;
    }
    build() {
        const scopes = this.scopesBuilder.build();
        return scopes
            ? { scopes: scopes }
            : null;
    }
}

class DataObjectFilterConditionBuilder {
    constructor() {
        this.conditions = [];
    }
    addContainsCondition(key, value, mode = 'All', objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueContainsCondition, Relewise.Client',
            key: key,
            value: value,
            objectPath: objectPath,
            mode: mode,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addEqualsCondition(key, value, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueEqualsCondition, Relewise.Client',
            value: value,
            objectPath: objectPath,
            negated: negated,
            key: key,
        };
        this.conditions.push(condition);
        return this;
    }
    addInRangeCondition(key, range, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueInRangeCondition, Relewise.Client',
            range: range,
            key: key,
            objectPath: objectPath,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addGreaterThanCondition(key, value, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueGreaterThanCondition, Relewise.Client',
            value: value,
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    addLessThanCondition(key, value, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueLessThanCondition, Relewise.Client',
            value: value,
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    addMinByCondition(key, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueMinByCondition, Relewise.Client',
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    addMaxByCondition(key, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueMaxByCondition, Relewise.Client',
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    build() {
        return this.conditions.length === 0
            ? null
            : this.conditions;
    }
}

class ConditionBuilder {
    constructor() {
        this.conditions = [];
    }
    addContainsCondition(value, valueCollectionEvaluationMode = 'All', negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.ContainsCondition, Relewise.Client',
            value: value,
            valueCollectionEvaluationMode: valueCollectionEvaluationMode,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addDistinctCondition(numberOfOccurrencesAllowedWithTheSameValue, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.DistinctCondition, Relewise.Client',
            numberOfOccurrencesAllowedWithTheSameValue: numberOfOccurrencesAllowedWithTheSameValue,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addEqualsCondition(value, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.EqualsCondition, Relewise.Client',
            value: value,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addGreaterThanCondition(value, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.GreaterThanCondition, Relewise.Client',
            value: value,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addLessThanCondition(value, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.LessThanCondition, Relewise.Client',
            value: value,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addDataObjectCondition(conditions, skip, take, negated = false) {
        const conditionsBuilder = new DataObjectFilterConditionBuilder();
        conditions(conditionsBuilder);
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.ContainsCondition, Relewise.Client',
            objectFilter: {
                conditions: conditionsBuilder.build(),
                skip: skip,
                take: take,
            },
            valueCollectionEvaluationMode: 'All',
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    build() {
        return this.conditions.length === 0
            ? null
            : { items: this.conditions };
    }
}

class FilterBuilder {
    constructor() {
        this.filters = [];
    }
    /**
     * Adds a product assortment filter to the request
     * @param assortmentIds
     * @param negated
     */
    addProductAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a variant assortment filter to the request
     * @param assortmentIds
     * @param negated
     */
    addVariantAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a brand assortment filter to the request
     * @param assortmentIds
     * @param negated
     */
    addBrandAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content assortment filter to the request
     * @param assortmentIds
     * @param negated
     */
    addContentAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category assortment filter to the request
     * @param assortmentIds
     * @param negated
     */
    addContentCategoryAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category assortment filter to the request
     * @param assortmentIds
     * @param negated
     */
    addProductCategoryAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products within the specificed categories
     * @param evaluationScope
     * @param categoryIds
     * @param negated
     */
    addProductCategoryIdFilter(evaluationScope, categoryIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(categoryIds)
            ? categoryIds
            : [categoryIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryIdFilter, Relewise.Client',
            evaluationScope: evaluationScope,
            categoryIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return contents within the specificed categories
     * @param evaluationScope
     * @param categoryIds
     * @param negated
     */
    addContentCategoryIdFilter(evaluationScope, categoryIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(categoryIds)
            ? categoryIds
            : [categoryIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryIdFilter, Relewise.Client',
            evaluationScope: evaluationScope,
            categoryIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specificied products
     * @param productIds
     * @param negated
     */
    addProductIdFilter(productIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(productIds)
            ? productIds
            : [productIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductIdFilter, Relewise.Client',
            productIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specificied variants
     * @param variantIds
     * @param negated
     */
    addVariantIdFilter(variantIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(variantIds)
            ? variantIds
            : [variantIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantIdFilter, Relewise.Client',
            variantIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specificied brands
     * @param brandIds
     * @param negated
     */
    addBrandIdFilter(brandIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(brandIds)
            ? brandIds
            : [brandIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandIdFilter, Relewise.Client',
            brandIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specificied contents
     * @param contentIds
     * @param negated
     */
    addContentIdFilter(contentIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(contentIds)
            ? contentIds
            : [contentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentIdFilter, Relewise.Client',
            contentIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specificied contents
     * @param companyIds
     * @param negated
     */
    addCompanyIdFilter(companyIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(companyIds)
            ? companyIds
            : [companyIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CompanyIdFilter, Relewise.Client',
            companyIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a range filter to the request ensuring the product has a certain range of variants
     * @param lowerBound
     * @param upperBound
     * @param negated
     */
    addProductHasVariantsFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductHasVariantsFilter, Relewise.Client',
            numberOfVariants: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products purchased since a certain point in time
     * @param sinceUtc
     * @param negated
     */
    addProductRecentlyPurchasedByUserFilter(sinceUtc, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyPurchasedByUserFilter, Relewise.Client',
            sinceUtc: sinceUtc,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products viewed since a certain point in time
     * @param sinceUtc
     * @param negated
     */
    addProductRecentlyViewedByUserFilter(sinceUtc, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyViewedByUserFilter, Relewise.Client',
            sinceUtc: sinceUtc,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products within a certain SalesPrice-range
     * @param lowerBound
     * @param upperBound
     * @param negated
     */
    addProductSalesPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductSalesPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products within a certain ListPice-range
     * @param lowerBound
     * @param upperBound
     * @param negated
     */
    addProductListPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductListPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return variants within a certain SalesPrice-range
     * @param lowerBound
     * @param upperBound
     * @param negated
     */
    addVariantSalesPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantSalesPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return variants within a certain ListPice-range
     * @param lowerBound
     * @param upperBound
     * @param negated
     */
    addVariantListPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantListPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return variants with a certain specification
     * @param key
     * @param equalTo
     * @param filterOutIfKeyIsNotFound controls if variants with or without the key should be returned
     * @param negated
     */
    addVariantSpecificationFilter(key, equalTo, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantSpecificationFilter, Relewise.Client',
            key: key,
            equalTo: equalTo,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    and(filterBuilder, negated = false, options) {
        var _a;
        const builder = new FilterBuilder();
        filterBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filters = builder.build();
        if (filters === null || filters.items === undefined || filters.items === null || filters.items.length <= 0) {
            throw new Error('And-filters must contain atleast 1 filter');
        }
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.AndFilter, Relewise.Client',
            filters: filters.items,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    or(filterBuilder, negated = false, options) {
        var _a;
        const builder = new FilterBuilder();
        filterBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filters = builder.build();
        if (filters === null || filters.items === undefined || filters.items === null || filters.items.length <= 0) {
            throw new Error('Or-filters must contain atleast 1 filter');
        }
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.OrFilter, Relewise.Client',
            filters: filters.items,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addProductDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a variant data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addVariantDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a brand data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addBrandDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a cart data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addCartDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CartDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a cart data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addContentCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addContentDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addProductCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a compnany data filter to the request
     * @param key
     * @param conditionBuilder
     * @param mustMatchAllConditions
     * @param filterOutIfKeyIsNotFound
     * @param negated
     */
    addCompanyDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CompanyDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a product display name filter to the request
    * @param key
    * @param conditionBuilder
    * @param mustMatchAllConditions
    * @param filterOutIfKeyIsNotFound
    * @param negated
    */
    addProductDisplayNameFilter(conditionBuilder, mustMatchAllConditions = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductDisplayNameFilter, Relewise.Client',
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a product variant filter to the request
    * @param products
    * @param negated
    */
    addProductAndVariantIdFilter(products, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductAndVariantIdFilter, Relewise.Client',
            productAndVariantIds: Array.isArray(products) ? products : [products],
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a product category level filter to the request
    * @param levels
    * @param negated
    */
    addProductCategoryLevelFilter(levels, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryLevelFilter, Relewise.Client',
            levels: Array.isArray(levels) ? levels : [levels],
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a product category has parent filter to the request
    * @param categoryIds
    * @param negated
    */
    addProductCategoryHasParentFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasParentFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a product category has child filter to the request
    * @param categoryIds
    * @param negated
    */
    addProductCategoryHasChildFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasChildFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a product category has ancestor filter to the request
    * @param categoryIds
    * @param negated
    */
    addProductCategoryHasAncestorFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasAncestorFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a content category level filter to the request
    * @param levels
    * @param negated
    */
    addContentCategoryLevelFilter(levels, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryLevelFilter, Relewise.Client',
            levels: Array.isArray(levels) ? levels : [levels],
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a content category has parent filter to the request
    * @param categoryIds
    * @param negated
    */
    addContentCategoryHasParentFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasParentFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a content category has child filter to the request
    * @param categoryIds
    * @param negated
    */
    addContentCategoryHasChildFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasChildFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a content category has ancestor filter to the request
    * @param categoryIds
    * @param negated
    */
    addContentCategoryHasAncestorFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasAncestorFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a product category has products filter to the request ensuring that only categories with products in them are returned
    * @param categoryIds
    * @param negated
    */
    addProductCategoryHasProductsFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasProductsFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
    * Adds a content category has contents filter to the request ensuring that only categories with content in them are returned
    * @param categoryIds
    * @param negated
    */
    addContentCategoryHasContentsFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasContentsFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    reset() {
        this.filters = [];
        return this;
    }
    build() {
        return this.filters.length === 0
            ? null
            : { items: this.filters };
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var version = { tag: 'client@1.22.0' };

class ProblemDetailsError extends Error {
    constructor(message, details) {
        super(message);
        this._details = details;
    }
    get details() {
        return this._details;
    }
}
class RelewiseClient {
    constructor(datasetId, apiKey, options) {
        this.datasetId = datasetId;
        this.apiKey = apiKey;
        this._serverUrl = 'https://api.relewise.com';
        this._urlPath = 'v1';
        if (!datasetId)
            throw new Error('Dataset id cannot be null or empty. Please contact Relewise if you don\'t have an account already or would like a free demo license');
        if (!apiKey)
            throw new Error('API Key secret cannot be null or empty. Please contact Relewise support if you don\'t know the apiKeySecret for your datasetId.');
        this._apiKeyHeader = `APIKey ${this.apiKey}`;
        if (options === null || options === void 0 ? void 0 : options.serverUrl) {
            this._serverUrl = options.serverUrl;
        }
    }
    get serverUrl() {
        return this._serverUrl;
    }
    request(name, data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestUrl = this.createRequestUrl(this._serverUrl, this.datasetId, this._urlPath, name);
            const response = yield fetch(requestUrl, {
                method: 'POST',
                headers: {
                    Authorization: this._apiKeyHeader,
                    'Content-Type': 'application/json',
                    'X-Relewise-Version': version.tag,
                },
                body: JSON.stringify(data),
                signal: options === null || options === void 0 ? void 0 : options.abortSignal,
            });
            if (!response.ok) {
                let responseMessage = null;
                try {
                    responseMessage = yield response.json();
                }
                catch (_) {
                }
                throw new ProblemDetailsError('Error when calling the Relewise API. Read more in the details property if there is error response or look in the network tab.', responseMessage);
            }
            try {
                const responseMessage = yield response.json();
                return responseMessage;
            }
            catch (err) {
                return undefined;
            }
        });
    }
    createRequestUrl(baseUrl, ...segments) {
        const joinedSegments = segments.join('/');
        return baseUrl.endsWith('/')
            ? baseUrl.concat(joinedSegments)
            : baseUrl.concat('/', joinedSegments);
    }
}

class Integrator extends RelewiseClient {
    constructor(datasetId, apiKey, options) {
        super(datasetId, apiKey, options);
        this.datasetId = datasetId;
        this.apiKey = apiKey;
        this.batchSize = 1000;
    }
    updateProduct(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackProductUpdateRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackProductUpdateRequest, Relewise.Client',
                productUpdate: request,
            }, options);
        });
    }
    executeProductAdministrativeAction(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackProductAdministrativeActionRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackProductAdministrativeActionRequest, Relewise.Client',
                administrativeAction: request,
            }, options);
        });
    }
    updateProductCategory(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackProductCategoryUpdateRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackProductCategoryUpdateRequest, Relewise.Client',
                productCategoryUpdate: request,
            }, options);
        });
    }
    executeProductCategoryAdministrativeAction(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackProductCategoryAdministrativeActionRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackProductCategoryAdministrativeActionRequest, Relewise.Client',
                administrativeAction: request,
            }, options);
        });
    }
    updateContentCategory(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackContentCategoryUpdateRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackContentCategoryUpdateRequest, Relewise.Client',
                contentCategoryUpdate: request,
            }, options);
        });
    }
    executeContentCategoryAdministrativeAction(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackContentCategoryAdministrativeActionRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackContentCategoryAdministrativeActionRequest, Relewise.Client',
                administrativeAction: request,
            }, options);
        });
    }
    updateContent(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackContentUpdateRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackContentUpdateRequest, Relewise.Client',
                contentUpdate: request,
            }, options);
        });
    }
    executeContentAdministrativeAction(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackContentAdministrativeActionRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackContentAdministrativeActionRequest, Relewise.Client',
                administrativeAction: request,
            }, options);
        });
    }
    updateBrand(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackBrandUpdateRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackBrandUpdateRequest, Relewise.Client',
                brandUpdate: request,
            }, options);
        });
    }
    executeBrandAdministrativeAction(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackBrandAdministrativeActionRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackBrandAdministrativeActionRequest, Relewise.Client',
                administrativeAction: request,
            }, options);
        });
    }
    updateCompany(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackCompanyUpdateRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackCompanyUpdateRequest, Relewise.Client',
                companyUpdate: request,
            }, options);
        });
    }
    executeCompanyAdministrativeAction(request, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return this.request('TrackCompanyAdministrativeActionRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackCompanyAdministrativeActionRequest, Relewise.Client',
                administrativeAction: request,
            }, options);
        });
    }
    batch(trackable, options) {
        return __awaiter$1(this, void 0, void 0, function* () {
            if (!trackable) {
                throw new Error('No trackable items was provided');
            }
            if (trackable.length === 0) {
                return;
            }
            const chuncks = trackable.length > this.batchSize
                ? this.chunk(trackable, this.batchSize)
                : [trackable];
            for (const chunck of chuncks) {
                yield this.request('BatchedTrackingRequest', {
                    $type: 'Relewise.Client.Requests.Tracking.BatchedTrackingRequest, Relewise.Client',
                    items: chunck,
                }, options);
            }
        });
    }
    chunk(trackable, chunk) {
        const result = [];
        for (let i = 0; i < trackable.length; i += chunk) {
            result.push(trackable.slice(i, i + chunk));
        }
        return result;
    }
}

class CategoryPathBuilder {
    constructor() {
        this.paths = [];
    }
    path(builder) {
        const b = new PathBuilder();
        builder(b);
        this.paths.push({ breadcrumbPathStartingFromRoot: b.build() });
        return this;
    }
    build() {
        return this.paths;
    }
}
class PathBuilder {
    constructor() {
        this.path = [];
    }
    category(categoryIdAndName) {
        this.path.push(categoryIdAndName);
        return this;
    }
    build() {
        return this.path.map(x => ({
            id: x.id,
            displayName: { values: x.displayName.map(d => ({ text: d.value, language: { value: d.language } })) },
        }));
    }
}

class ProductUpdateBuilder {
    constructor({ id, productUpdateKind, brandUpdateKind, variantUpdateKind = 'UpdateAndAppend', replaceExistingVariants = false }) {
        this.product = { id: id };
        this.productUpdateKind = productUpdateKind;
        this.variantUpdateKind = variantUpdateKind;
        this.replaceExistingVariants = replaceExistingVariants;
        this.brandUpdateKind = brandUpdateKind;
    }
    displayName(values) {
        this.product.displayName = {
            values: values.map(x => ({ text: x.value, language: { value: x.language } })),
        };
        return this;
    }
    data(data) {
        this.product.data = data; // TODO remove dirty hack
        return this;
    }
    variants(variants) {
        this.productVariants = variants;
        return this;
    }
    /**
     * Add multiple category paths to a product. Start from the root to the lowest child. Example: Tools -> Outdoor -> Shovel
     * @param paths
     * @returns
     */
    categoryPaths(builder) {
        const b = new CategoryPathBuilder();
        builder(b);
        this.product.categoryPaths = b.build();
        return this;
    }
    assortments(assortments) {
        this.product.assortments = assortments;
        return this;
    }
    listPrice(values) {
        this.product.listPrice = { values: values.map(x => ({ amount: x.amount, currency: { value: x.currency } })) };
        return this;
    }
    salesPrice(values) {
        this.product.salesPrice = { values: values.map(x => ({ amount: x.amount, currency: { value: x.currency } })) };
        return this;
    }
    brand(brand) {
        this.product.brand = brand;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.DataTypes.ProductUpdate, Relewise.Client',
            product: this.product,
            variants: this.productVariants,
            productUpdateKind: this.productUpdateKind,
            variantUpdateKind: this.variantUpdateKind,
            brandUpdateKind: this.brandUpdateKind,
            replaceExistingVariants: this.replaceExistingVariants,
        };
    }
}

class ProductAdministrativeActionBuilder {
    constructor({ language, currency, productUpdateKind, variantUpdateKind = 'None', filters }) {
        this.filterBuilder = new FilterBuilder();
        this.language = language;
        this.currency = currency;
        this.productUpdateKind = productUpdateKind;
        this.variantUpdateKind = variantUpdateKind;
        filters(this.filterBuilder);
    }
    filters(filters) {
        filters(this.filterBuilder);
        return this;
    }
    build() {
        const filters = this.filterBuilder.build();
        if (!filters || !filters.items || filters.items.length === 0) {
            throw new Error('No filters were provided for the product administrative action');
        }
        return Object.assign(Object.assign(Object.assign({ $type: 'Relewise.Client.DataTypes.ProductAdministrativeAction, Relewise.Client' }, (this.language && { language: { value: this.language } })), (this.currency && { currency: { value: this.currency } })), { filters: filters, productUpdateKind: this.productUpdateKind, variantUpdateKind: this.variantUpdateKind });
    }
}

class ProductVariantBuilder {
    constructor({ id }) {
        this.variant = { id: id };
    }
    displayName(values) {
        this.variant.displayName = {
            values: values.map(x => ({ text: x.value, language: { value: x.language } })),
        };
        return this;
    }
    data(data) {
        this.variant.data = data; // TODO remove dirty hack
        return this;
    }
    assortments(assortments) {
        this.variant.assortments = assortments;
        return this;
    }
    listPrice(values) {
        this.variant.listPrice = { values: values.map(x => ({ amount: x.amount, currency: { value: x.currency } })) };
        return this;
    }
    salesPrice(values) {
        this.variant.salesPrice = { values: values.map(x => ({ amount: x.amount, currency: { value: x.currency } })) };
        return this;
    }
    specifications(specifications) {
        this.variant.specification = specifications;
        return this;
    }
    build() {
        return this.variant;
    }
}

class ProductCategoryUpdateBuilder {
    constructor({ id, kind }) {
        this.productCategory = {
            $type: 'Relewise.Client.DataTypes.ProductCategory, Relewise.Client',
            id: id,
        };
        this.kind = kind;
    }
    displayName(values) {
        this.productCategory.displayName = {
            values: values.map(x => ({ text: x.value, language: { value: x.language } })),
        };
        return this;
    }
    data(data) {
        this.productCategory.data = data; // TODO remove dirty hack
        return this;
    }
    /**
     * Add multiple category paths to a product category. Start from the root to the lowest child. Example: Tools -> Outdoor -> Shovel
     * @param paths
     * @returns
     */
    categoryPaths(builder) {
        const b = new CategoryPathBuilder();
        builder(b);
        this.productCategory.categoryPaths = b.build();
        return this;
    }
    assortments(assortments) {
        this.productCategory.assortments = assortments;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.DataTypes.ProductCategoryUpdate, Relewise.Client',
            category: this.productCategory,
            kind: this.kind,
        };
    }
}

class ProductCategoryAdministrativeActionBuilder {
    constructor({ language, currency, kind, filters }) {
        this.filterBuilder = new FilterBuilder();
        this.language = language;
        this.currency = currency;
        this.kind = kind;
        filters(this.filterBuilder);
    }
    filters(filters) {
        filters(this.filterBuilder);
        return this;
    }
    build() {
        const filters = this.filterBuilder.build();
        if (!filters || !filters.items || filters.items.length === 0) {
            throw new Error('No filters were provided for the product category administrative action');
        }
        return Object.assign(Object.assign(Object.assign({ $type: 'Relewise.Client.DataTypes.ProductCategoryAdministrativeAction, Relewise.Client' }, (this.language && { language: { value: this.language } })), (this.currency && { currency: { value: this.currency } })), { filters: filters, kind: this.kind });
    }
}

class ContentCategoryUpdateBuilder {
    constructor({ id, kind }) {
        this.contentCategory = {
            $type: 'Relewise.Client.DataTypes.ContentCategory, Relewise.Client',
            id: id,
        };
        this.kind = kind;
    }
    displayName(values) {
        this.contentCategory.displayName = {
            values: values.map(x => ({ text: x.value, language: { value: x.language } })),
        };
        return this;
    }
    data(data) {
        this.contentCategory.data = data; // TODO remove dirty hack
        return this;
    }
    /**
     * Add multiple category paths to a content category. Start from the root to the lowest child. Example: Tools -> Outdoor -> Shovel
     * @param paths
     * @returns
     */
    categoryPaths(builder) {
        const b = new CategoryPathBuilder();
        builder(b);
        this.contentCategory.categoryPaths = b.build();
        return this;
    }
    assortments(assortments) {
        this.contentCategory.assortments = assortments;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.DataTypes.ContentCategoryUpdate, Relewise.Client',
            category: this.contentCategory,
            kind: this.kind,
        };
    }
}

class ContentCategoryAdministrativeActionBuilder {
    constructor({ language, currency, kind, filters }) {
        this.filterBuilder = new FilterBuilder();
        this.language = language;
        this.currency = currency;
        this.kind = kind;
        filters(this.filterBuilder);
    }
    filters(filters) {
        filters(this.filterBuilder);
        return this;
    }
    build() {
        const filters = this.filterBuilder.build();
        if (!filters || !filters.items || filters.items.length === 0) {
            throw new Error('No filters were provided for the product category administrative action');
        }
        return Object.assign(Object.assign(Object.assign({ $type: 'Relewise.Client.DataTypes.ContentCategoryAdministrativeAction, Relewise.Client' }, (this.language && { language: { value: this.language } })), (this.currency && { currency: { value: this.currency } })), { filters: filters, kind: this.kind });
    }
}

class ContentUpdateBuilder {
    constructor({ id, updateKind }) {
        this.content = { id: id };
        this.updateKind = updateKind;
    }
    displayName(values) {
        this.content.displayName = {
            values: values.map(x => ({ text: x.value, language: { value: x.language } })),
        };
        return this;
    }
    data(data) {
        this.content.data = data; // TODO remove dirty hack
        return this;
    }
    /**
     * Add multiple category paths to a content. Start from the root to the lowest child. Example: Tools -> Outdoor -> Shovel
     * @param paths
     * @returns
     */
    categoryPaths(builder) {
        const b = new CategoryPathBuilder();
        builder(b);
        this.content.categoryPaths = b.build();
        return this;
    }
    assortments(assortments) {
        this.content.assortments = assortments;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.DataTypes.ContentUpdate, Relewise.Client',
            content: this.content,
            kind: this.updateKind,
        };
    }
}

class ContentAdministrativeActionBuilder {
    constructor({ language, currency, kind, filters }) {
        this.filterBuilder = new FilterBuilder();
        this.language = language;
        this.currency = currency;
        this.kind = kind;
        filters(this.filterBuilder);
    }
    filters(filters) {
        filters(this.filterBuilder);
        return this;
    }
    build() {
        const filters = this.filterBuilder.build();
        if (!filters || !filters.items || filters.items.length === 0) {
            throw new Error('No filters were provided for the content administrative action');
        }
        return Object.assign(Object.assign(Object.assign({ $type: 'Relewise.Client.DataTypes.ContentAdministrativeAction, Relewise.Client' }, (this.language && { language: { value: this.language } })), (this.currency && { currency: { value: this.currency } })), { filters: filters, kind: this.kind });
    }
}

class BrandUpdateBuilder {
    constructor({ id, updateKind }) {
        this.brand = { id: id };
        this.updateKind = updateKind;
    }
    displayName(name) {
        this.brand.displayName = name;
        return this;
    }
    data(data) {
        this.brand.data = data; // TODO remove dirty hack
        return this;
    }
    assortments(assortments) {
        this.brand.assortments = assortments;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.DataTypes.BrandUpdate, Relewise.Client',
            brand: this.brand,
            kind: this.updateKind,
        };
    }
}

class BrandAdministrativeActionBuilder {
    constructor({ language, currency, kind, filters }) {
        this.filterBuilder = new FilterBuilder();
        this.language = language;
        this.currency = currency;
        this.kind = kind;
        filters(this.filterBuilder);
    }
    filters(filters) {
        filters(this.filterBuilder);
        return this;
    }
    build() {
        const filters = this.filterBuilder.build();
        if (!filters || !filters.items || filters.items.length === 0) {
            throw new Error('No filters were provided for the brand administrative action');
        }
        return Object.assign(Object.assign(Object.assign({ $type: 'Relewise.Client.DataTypes.BrandAdministrativeAction, Relewise.Client' }, (this.language && { language: { value: this.language } })), (this.currency && { currency: { value: this.currency } })), { filters: filters, kind: this.kind });
    }
}

class CompanyUpdateBuilder {
    constructor({ id, updateKind, replaceExistingParents }) {
        this.company = { id: id };
        this.updateKind = updateKind;
        this.replaceExistingParents = replaceExistingParents;
    }
    data(data) {
        this.company.data = data; // TODO remove dirty hack
        return this;
    }
    parents(parents) {
        this.parentCompanies = parents;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.DataTypes.CompanyUpdate, Relewise.Client',
            company: this.company,
            kind: this.updateKind,
            replaceExistingParents: this.replaceExistingParents,
            parents: this.parentCompanies,
        };
    }
}

class CompanyAdministrativeActionBuilder {
    constructor({ language, currency, kind, filters }) {
        this.filterBuilder = new FilterBuilder();
        this.language = language;
        this.currency = currency;
        this.kind = kind;
        filters(this.filterBuilder);
    }
    filters(filters) {
        filters(this.filterBuilder);
        return this;
    }
    build() {
        const filters = this.filterBuilder.build();
        if (!filters || !filters.items || filters.items.length === 0) {
            throw new Error('No filters were provided for the brand administrative action');
        }
        return Object.assign(Object.assign(Object.assign({ $type: 'Relewise.Client.DataTypes.CompanyAdministrativeAction, Relewise.Client' }, (this.language && { language: { value: this.language } })), (this.currency && { currency: { value: this.currency } })), { filters: filters, kind: this.kind });
    }
}

export { BrandAdministrativeActionBuilder, BrandUpdateBuilder, CategoryPathBuilder, CompanyAdministrativeActionBuilder, CompanyUpdateBuilder, ContentAdministrativeActionBuilder, ContentCategoryAdministrativeActionBuilder, ContentCategoryUpdateBuilder, ContentUpdateBuilder, Integrator, PathBuilder, ProductAdministrativeActionBuilder, ProductCategoryAdministrativeActionBuilder, ProductCategoryUpdateBuilder, ProductUpdateBuilder, ProductVariantBuilder };
//# sourceMappingURL=relewise-client.js.map
