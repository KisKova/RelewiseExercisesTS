'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class DataValueBase {
    constructor(type, value) {
        this.type = type;
        this.value = value;
    }
}
class StringDataValue extends DataValueBase {
    constructor(value) {
        super('String', value);
        this.isCollection = false;
    }
}
class StringCollectionDataValue extends DataValueBase {
    constructor(value) {
        super('StringList', {
            $type: 'System.Collections.Generic.List`1[[System.String, System.Private.CoreLib]], System.Private.CoreLib',
            $values: value,
        });
        this.isCollection = true;
    }
}
class MultilingualCollectionDataValue extends DataValueBase {
    constructor(values) {
        super('MultilingualCollection', {
            $type: 'Relewise.Client.DataTypes.MultilingualCollection, Relewise.Client',
            values: values.map(x => ({ values: x.values, language: { value: x.language } })),
        });
        this.isCollection = true;
    }
}
class NumberDataValue extends DataValueBase {
    constructor(value) {
        super('Double', value);
        this.isCollection = false;
    }
}
class DoubleCollectionDataValue extends DataValueBase {
    constructor(value) {
        super('DoubleList', {
            $type: 'System.Collections.Generic.List`1[[System.Double, System.Private.CoreLib]], System.Private.CoreLib',
            $values: value,
        });
        this.isCollection = true;
    }
}
class BooleanDataValue extends DataValueBase {
    constructor(value) {
        super('Boolean', value);
        this.isCollection = false;
    }
}
class BooleanCollectionDataValue extends DataValueBase {
    constructor(value) {
        super('BooleanList', {
            $type: 'System.Collections.Generic.List`1[[System.Boolean, System.Private.CoreLib]], System.Private.CoreLib',
            $values: value,
        });
        this.isCollection = true;
    }
}
class MultiCurrencyDataValue extends DataValueBase {
    constructor(values) {
        super('MultiCurrency', {
            $type: 'Relewise.Client.DataTypes.MultiCurrency, Relewise.Client',
            values: values.map(x => ({ amount: x.amount, currency: { value: x.currency } })),
        });
        this.isCollection = false;
    }
}
class MultilingualDataValue extends DataValueBase {
    constructor(values) {
        super('Multilingual', {
            $type: 'Relewise.Client.DataTypes.Multilingual, Relewise.Client',
            values: values.map(x => ({ text: x.value, language: { value: x.language } })),
        });
        this.isCollection = false;
    }
}
class ObjectDataValue extends DataValueBase {
    constructor(dataObject) {
        super('Object', {
            $type: 'Relewise.Client.DataTypes.DataObject, Relewise.Client',
            data: dataObject,
        });
        this.isCollection = false;
    }
}
class ObjectCollectionDataValue extends DataValueBase {
    constructor(dataObjects) {
        super('ObjectList', {
            $type: 'System.Collections.Generic.List`1[[Relewise.Client.DataTypes.DataObject, Relewise.Client]], System.Private.CoreLib',
            $values: dataObjects.map(x => ({ $type: 'Relewise.Client.DataTypes.DataObject, Relewise.Client', data: x })),
        });
        this.isCollection = true;
    }
}

class FilterScopesBuilder {
    constructor() {
        this.fillScope = undefined;
        this.defaultScope = undefined;
    }
    fill({ apply }) {
        this.fillScope = {
            $type: 'Relewise.Client.Requests.Filters.Settings.ApplyFilterSettings, Relewise.Client',
            apply,
        };
        return this;
    }
    default({ apply }) {
        this.defaultScope = {
            $type: 'Relewise.Client.Requests.Filters.Settings.ApplyFilterSettings, Relewise.Client',
            apply,
        };
        return this;
    }
    build() {
        return this.fillScope || this.defaultScope
            ? {
                fill: this.fillScope,
                default: this.defaultScope,
            }
            : null;
    }
}

class FilterSettingsBuilder {
    constructor() {
        this.scopesBuilder = new FilterScopesBuilder();
    }
    scopes(builder) {
        builder(this.scopesBuilder);
        return this;
    }
    build() {
        const scopes = this.scopesBuilder.build();
        return scopes
            ? { scopes: scopes }
            : null;
    }
}

class DataObjectFilterConditionBuilder {
    constructor() {
        this.conditions = [];
    }
    addContainsCondition(key, value, mode = 'All', objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueContainsCondition, Relewise.Client',
            key: key,
            value: value,
            objectPath: objectPath,
            mode: mode,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addEqualsCondition(key, value, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueEqualsCondition, Relewise.Client',
            value: value,
            objectPath: objectPath,
            negated: negated,
            key: key,
        };
        this.conditions.push(condition);
        return this;
    }
    addInRangeCondition(key, range, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueInRangeCondition, Relewise.Client',
            range: range,
            key: key,
            objectPath: objectPath,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addGreaterThanCondition(key, value, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueGreaterThanCondition, Relewise.Client',
            value: value,
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    addLessThanCondition(key, value, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueLessThanCondition, Relewise.Client',
            value: value,
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    addMinByCondition(key, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueMinByCondition, Relewise.Client',
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    addMaxByCondition(key, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueMaxByCondition, Relewise.Client',
            negated: negated,
            key: key,
            objectPath: objectPath,
        };
        this.conditions.push(condition);
        return this;
    }
    addObjectValueIsSubsetOfCondition(key, value, objectPath, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Filters.DataObjects.Conditions.ObjectValueIsSubsetOfCondition, Relewise.Client',
            value: value,
            key: key,
            objectPath: objectPath,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    build() {
        return this.conditions.length === 0
            ? null
            : this.conditions;
    }
}

class FilterBuilderBase {
    constructor(TFilterBuilderCtor) {
        this.TFilterBuilderCtor = TFilterBuilderCtor;
        this.filters = [];
    }
    /**
     * Adds an AND filter to the request.
     * @param filterBuilder - Function to build the AND filter.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilderBase instance for chaining.
     */
    and(filterBuilder, negated = false, options) {
        var _a;
        const builder = new this.TFilterBuilderCtor();
        filterBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filters = builder.build();
        if (filters === null || !filters.items || filters.items.length <= 0) {
            throw new Error('And-filters must contain at least 1 filter');
        }
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.AndFilter, Relewise.Client',
            filters: filters.items,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds an OR filter to the request.
     * @param filterBuilder - Function to build the OR filter.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilderBase instance for chaining.
     */
    or(filterBuilder, negated = false, options) {
        var _a;
        const builder = new this.TFilterBuilderCtor();
        filterBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filters = builder.build();
        if (filters === null || !filters.items || filters.items.length <= 0) {
            throw new Error('Or-filters must contain at least 1 filter');
        }
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.OrFilter, Relewise.Client',
            filters: filters.items,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Resets the filters.
     * @returns The FilterBuilderBase instance for chaining.
     */
    reset() {
        this.filters = [];
        return this;
    }
    /**
     * Builds the filter collection.
     * @returns The FilterCollection or null if no filters are added.
     */
    build() {
        return this.filters.length === 0 ? null : { items: this.filters };
    }
}

class ConditionBuilder {
    constructor() {
        this.conditions = [];
    }
    addContainsCondition(value, valueCollectionEvaluationMode = 'All', negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.ContainsCondition, Relewise.Client',
            value: value,
            valueCollectionEvaluationMode: valueCollectionEvaluationMode,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addDistinctCondition(numberOfOccurrencesAllowedWithTheSameValue, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.DistinctCondition, Relewise.Client',
            numberOfOccurrencesAllowedWithTheSameValue: numberOfOccurrencesAllowedWithTheSameValue,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addEqualsCondition(value, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.EqualsCondition, Relewise.Client',
            value: value,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addGreaterThanCondition(value, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.GreaterThanCondition, Relewise.Client',
            value: value,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addLessThanCondition(value, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.LessThanCondition, Relewise.Client',
            value: value,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addDataObjectCondition(conditions, skip, take, negated = false) {
        const conditionsBuilder = new DataObjectFilterConditionBuilder();
        conditions(conditionsBuilder);
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.ContainsCondition, Relewise.Client',
            objectFilter: {
                conditions: conditionsBuilder.build(),
                skip: skip,
                take: take,
            },
            valueCollectionEvaluationMode: 'All',
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addHasValueCondition(negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.HasValueCondition, Relewise.Client',
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    addRelativeDateTimeCondition(comparison, unit, currentTimeOffset = 0, negated = false) {
        const condition = {
            $type: 'Relewise.Client.Requests.Conditions.RelativeDateTimeCondition, Relewise.Client',
            comparison: comparison,
            currentTimeOffset: currentTimeOffset,
            unit: unit,
            negated: negated,
        };
        this.conditions.push(condition);
        return this;
    }
    build() {
        return this.conditions.length === 0
            ? null
            : { items: this.conditions };
    }
}

class BrandFilterBuilder extends FilterBuilderBase {
    constructor() { super(BrandFilterBuilder); }
    /**
     * Adds a brand assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The BrandFilterBuilder instance for chaining.
     */
    addBrandAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specified brands.
     * @param brandIds - Array of brand IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The BrandFilterBuilder instance for chaining.
     */
    addBrandIdFilter(brandIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(brandIds)
            ? brandIds
            : [brandIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandIdFilter, Relewise.Client',
            brandIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a brand data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out brands without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The BrandFilterBuilder instance for chaining.
     */
    addBrandDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a brand has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The BrandFilterBuilder instance for chaining.
     */
    addBrandDataHasKeyFilter(key, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandDataHasKeyFilter, Relewise.Client',
            key: key,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a brand is disabled filter to the request. Only works for brand queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The BrandFilterBuilder instance for chaining.
     */
    addBrandDisabledFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.BrandDisabledFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
}

class CompanyFilterBuilder extends FilterBuilderBase {
    constructor() { super(CompanyFilterBuilder); }
    /**
     * Filters the request to only return the specified companies.
     * @param companyIds - Array of company IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The CompanyFilterBuilder instance for chaining.
     */
    addCompanyIdFilter(companyIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(companyIds)
            ? companyIds
            : [companyIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CompanyIdFilter, Relewise.Client',
            companyIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a company data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out companies without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The CompanyFilterBuilder instance for chaining.
     */
    addCompanyDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CompanyDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a company has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The CompanyFilterBuilder instance for chaining.
     */
    addCompanyDataHasKeyFilter(key, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CompanyDataHasKeyFilter, Relewise.Client',
            key: key,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a company is disabled filter to the request. Only works for company queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The CompanyFilterBuilder instance for chaining.
     */
    addCompanyDisabledFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CompanyDisabledFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
}

class ContentFilterBuilder extends FilterBuilderBase {
    constructor() { super(ContentFilterBuilder); }
    /**
     * Adds a content assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return contents within the specified categories.
     * @param evaluationScope - Scope of the category evaluation (ImmediateParent, ImmediateParentOrItsParent, Ancestor).
     * @param categoryIds - Array of category IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryIdFilter(evaluationScope, categoryIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(categoryIds)
            ? categoryIds
            : [categoryIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryIdFilter, Relewise.Client',
            evaluationScope: evaluationScope,
            categoryIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specified contents.
     * @param contentIds - Array of content IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentIdFilter(contentIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(contentIds)
            ? contentIds
            : [contentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentIdFilter, Relewise.Client',
            contentIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category level filter to the request.
     * @param levels - Array of category levels or a single level.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryLevelFilter(levels, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryLevelFilter, Relewise.Client',
            levels: Array.isArray(levels) ? levels : [levels],
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category has parent filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryHasParentFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasParentFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category has child filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryHasChildFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasChildFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category has ancestor filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryHasAncestorFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasAncestorFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category has contents filter to the request ensuring that only categories with content in them are returned.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryHasContentsFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryHasContentsFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out categories without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out contents without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryDataHasKeyFilter(key, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryDataHasKeyFilter, Relewise.Client',
            key: key,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category is disabled filter to the request. Only works for content queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryDisabledFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryDisabledFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return content categories recently viewed by the user.
     * @param sinceMinutesAgo - Time in minutes since the category was viewed.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentCategoryRecentlyViewedByUserFilter(sinceMinutesAgo, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentCategoryRecentlyViewedByUserFilter, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentDataHasKeyFilter(key, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentDataHasKeyFilter, Relewise.Client',
            key: key,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content is disabled filter to the request. Only works for content queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentDisabledFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentDisabledFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return content recently viewed by the user.
     * @param sinceMinutesAgo - Time in minutes since the content was viewed.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentRecentlyViewedByUserFilter(sinceMinutesAgo, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentRecentlyViewedByUserFilter, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content has categories filter to the request.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ContentFilterBuilder instance for chaining.
     */
    addContentHasCategoriesFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ContentHasCategoriesFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
}

class ProductFilterBuilder extends FilterBuilderBase {
    constructor() { super(ProductFilterBuilder); }
    /**
     * Adds a product assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products within the specified categories.
     * @param evaluationScope - Scope of the category evaluation (ImmediateParent, ImmediateParentOrItsParent, Ancestor).
     * @param categoryIds - Array of category IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryIdFilter(evaluationScope, categoryIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(categoryIds)
            ? categoryIds
            : [categoryIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryIdFilter, Relewise.Client',
            evaluationScope: evaluationScope,
            categoryIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out categories without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specified products.
     * @param productIds - Array of product IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductIdFilter(productIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(productIds)
            ? productIds
            : [productIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductIdFilter, Relewise.Client',
            productIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a range filter to the request ensuring the product has a certain range of variants.
     * @param lowerBound - Lower bound of the range (inclusive).
     * @param upperBound - Upper bound of the range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductHasVariantsFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductHasVariantsFilter, Relewise.Client',
            numberOfVariants: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products purchased since a certain point in time.
     * @param sinceUtc - Date-time string indicating the point in time.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByUserFilter(sinceUtc, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyPurchasedByUserFilter, Relewise.Client',
            sinceUtc: sinceUtc,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products viewed since a certain point in time.
     * @param sinceUtc - Date-time string indicating the point in time.
     * @param negated - If true

, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByUserFilter(sinceUtc, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyViewedByUserFilter, Relewise.Client',
            sinceUtc: sinceUtc,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products within a certain sales price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductSalesPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductSalesPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return products within a certain list price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductListPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductListPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product display name filter to the request.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductDisplayNameFilter(conditionBuilder, mustMatchAllConditions = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductDisplayNameFilter, Relewise.Client',
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product and variant ID filter to the request.
     * @param products - Array of product and variant IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductAndVariantIdFilter(products, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductAndVariantIdFilter, Relewise.Client',
            productAndVariantIds: Array.isArray(products) ? products : [products],
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category level filter to the request.
     * @param levels - Array of category levels or a single level.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryLevelFilter(levels, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryLevelFilter, Relewise.Client',
            levels: Array.isArray(levels) ? levels : [levels],
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category has parent filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryHasParentFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasParentFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category has child filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryHasChildFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasChildFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category has ancestor filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryHasAncestorFilter(categoryIds, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasAncestorFilter, Relewise.Client',
            categoryIds: categoryIds ? (Array.isArray(categoryIds) ? categoryIds : [categoryIds]) : undefined,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category has products filter to the request ensuring that only categories with products in them are returned.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryHasProductsFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryHasProductsFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out products without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryDataHasKeyFilter(key, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryDataHasKeyFilter, Relewise.Client',
            key: key,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category is disabled filter to the request. Only works for product queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryDisabledFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryDisabledFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product category recently viewed by user filter to the request.
     * @param sinceMinutesAgo - Time in minutes since the category was viewed.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductCategoryRecentlyViewedByUserFilter(sinceMinutesAgo, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductCategoryRecentlyViewedByUserFilter, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductDataHasKeyFilter(key, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductDataHasKeyFilter, Relewise.Client',
            key: key,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product is disabled filter to the request. Only works for product queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductDisabledFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductDisabledFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product has categories filter to the request.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductHasCategoriesFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductHasCategoriesFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return products recently purchased by a company.
     * @param sinceMinutesAgo - Time in minutes since the purchase.
     * @param companyIds - Array of company IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByCompanyFilter(sinceMinutesAgo, companyIds, negated = false, options) {
        var _a;
        const companies = Array.isArray(companyIds)
            ? companyIds
            : [companyIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyPurchasedByCompanyFilter, Relewise.Client',
            companyIds: companies,
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return products recently purchased by the user's company.
     * @param sinceMinutesAgo - Time in minutes since the purchase.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByUserCompanyFilter(sinceMinutesAgo, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyPurchasedByUserCompanyFilter, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return products recently purchased by the user's parent company.
     * @param sinceMinutesAgo - Time in minutes since the purchase.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByUserParentCompanyFilter(sinceMinutesAgo, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyPurchasedByUserParentCompanyFilter, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return products recently viewed by a company.
     * @param sinceMinutesAgo - Time in minutes since the view.
     * @param companyIds - Array of company IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByCompanyFilter(sinceMinutesAgo, companyIds, negated = false, options) {
        var _a;
        const companies = Array.isArray(companyIds)
            ? companyIds
            : [companyIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyViewedByCompanyFilter, Relewise.Client',
            companyIds: companies,
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return products recently viewed by the user's company.
     * @param sinceMinutesAgo - Time in minutes since the view.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByUserCompanyFilter(sinceMinutesAgo, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyViewedByUserCompanyFilter, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return products recently viewed by the user's parent company.
     * @param sinceMinutesAgo - Time in minutes since the view.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByUserParentCompanyFilter(sinceMinutesAgo, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductRecentlyViewedByUserParentCompanyFilter, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a filter to only return products in the user's cart.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductInCartFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.ProductInCartFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
}

class VariantFilterBuilder extends FilterBuilderBase {
    constructor() { super(VariantFilterBuilder); }
    /**
     * Adds a variant assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantAssortmentFilter(assortmentIds, negated = false, options) {
        var _a;
        const assortments = Array.isArray(assortmentIds)
            ? assortmentIds
            : [assortmentIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantAssortmentFilter, Relewise.Client',
            assortments: assortments,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return the specified variants.
     * @param variantIds - Array of variant IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantIdFilter(variantIds, negated = false, options) {
        var _a;
        const ids = Array.isArray(variantIds)
            ? variantIds
            : [variantIds];
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantIdFilter, Relewise.Client',
            variantIds: ids,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return variants within a certain list price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantListPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantListPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return variants within a certain sales price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantSalesPriceFilter(lowerBound, upperBound, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantSalesPriceFilter, Relewise.Client',
            range: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Filters the request to only return variants with a certain specification.
     * @param key - Specification key.
     * @param equalTo - Specification value to match.
     * @param filterOutIfKeyIsNotFound - If true, filters out variants without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantSpecificationFilter(key, equalTo, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantSpecificationFilter, Relewise.Client',
            key: key,
            equalTo: equalTo,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a variant data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out variants without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            objectPath: options === null || options === void 0 ? void 0 : options.objectPath,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a variant has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantDataHasKeyFilter(key, negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantDataHasKeyFilter, Relewise.Client',
            key: key,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a variant is disabled filter to the request. Only works for product queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The VariantFilterBuilder instance for chaining.
     */
    addVariantDisabledFilter(negated = false, options) {
        var _a;
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.VariantDisabledFilter, Relewise.Client',
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
}

class FilterBuilder {
    constructor() {
        this.filters = [];
        this.productFilterBuilder = new ProductFilterBuilder();
        this.brandFilterBuilder = new BrandFilterBuilder();
        this.contentFilterBuilder = new ContentFilterBuilder();
        this.variantFilterBuilder = new VariantFilterBuilder();
        this.companyFilterBuilder = new CompanyFilterBuilder();
    }
    /**
     * Adds a product assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductAssortmentFilter(assortmentIds, negated = false, options) {
        this.productFilterBuilder.addProductAssortmentFilter(assortmentIds, negated, options);
        return this;
    }
    /**
     * Adds a variant assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantAssortmentFilter(assortmentIds, negated = false, options) {
        this.variantFilterBuilder.addVariantAssortmentFilter(assortmentIds, negated, options);
        return this;
    }
    /**
     * Adds a brand assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addBrandAssortmentFilter(assortmentIds, negated = false, options) {
        this.brandFilterBuilder.addBrandAssortmentFilter(assortmentIds, negated, options);
        return this;
    }
    /**
     * Adds a content assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentAssortmentFilter(assortmentIds, negated = false, options) {
        this.contentFilterBuilder.addContentAssortmentFilter(assortmentIds, negated, options);
        return this;
    }
    /**
     * Adds a content category assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryAssortmentFilter(assortmentIds, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryAssortmentFilter(assortmentIds, negated, options);
        return this;
    }
    /**
     * Adds a product category assortment filter to the request.
     * @param assortmentIds - Array of assortment IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryAssortmentFilter(assortmentIds, negated = false, options) {
        this.productFilterBuilder.addProductCategoryAssortmentFilter(assortmentIds, negated, options);
        return this;
    }
    /**
     * Filters the request to only return products within the specified categories.
     * @param evaluationScope - Scope of the category evaluation (ImmediateParent, ImmediateParentOrItsParent, Ancestor).
     * @param categoryIds - Array of category IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryIdFilter(evaluationScope, categoryIds, negated = false, options) {
        this.productFilterBuilder.addProductCategoryIdFilter(evaluationScope, categoryIds, negated, options);
        return this;
    }
    /**
     * Filters the request to only return contents within the specified categories.
     * @param evaluationScope - Scope of the category evaluation (ImmediateParent, ImmediateParentOrItsParent, Ancestor).
     * @param categoryIds - Array of category IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryIdFilter(evaluationScope, categoryIds, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryIdFilter(evaluationScope, categoryIds, negated, options);
        return this;
    }
    /**
     * Filters the request to only return the specified products.
     * @param productIds - Array of product IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductIdFilter(productIds, negated = false, options) {
        this.productFilterBuilder.addProductIdFilter(productIds, negated, options);
        return this;
    }
    /**
     * Filters the request to only return the specified variants.
     * @param variantIds - Array of variant IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantIdFilter(variantIds, negated = false, options) {
        this.variantFilterBuilder.addVariantIdFilter(variantIds, negated, options);
        return this;
    }
    /**
     * Filters the request to only return the specified brands.
     * @param brandIds - Array of brand IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addBrandIdFilter(brandIds, negated = false, options) {
        this.brandFilterBuilder.addBrandIdFilter(brandIds, negated, options);
        return this;
    }
    /**
     * Filters the request to only return the specified contents.
     * @param contentIds - Array of content IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentIdFilter(contentIds, negated = false, options) {
        this.contentFilterBuilder.addContentIdFilter(contentIds, negated, options);
        return this;
    }
    /**
     * Filters the request to only return the specified companies.
     * @param companyIds - Array of company IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addCompanyIdFilter(companyIds, negated = false, options) {
        this.companyFilterBuilder.addCompanyIdFilter(companyIds, negated, options);
        return this;
    }
    /**
     * Adds a range filter to the request ensuring the product has a certain range of variants.
     * @param lowerBound - Lower bound of the range (inclusive).
     * @param upperBound - Upper bound of the range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductHasVariantsFilter(lowerBound, upperBound, negated = false, options) {
        this.productFilterBuilder.addProductHasVariantsFilter(lowerBound, upperBound, negated, options);
        return this;
    }
    /**
     * Filters the request to only return products purchased since a certain point in time.
     * @param sinceUtc - Date-time string indicating the point in time.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByUserFilter(sinceUtc, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyPurchasedByUserFilter(sinceUtc, negated, options);
        return this;
    }
    /**
     * Filters the request to only return products viewed since a certain point in time.
     * @param sinceUtc - Date-time string indicating the point in time.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByUserFilter(sinceUtc, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyViewedByUserFilter(sinceUtc, negated, options);
        return this;
    }
    /**
     * Filters the request to only return products within a certain sales price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductSalesPriceFilter(lowerBound, upperBound, negated = false, options) {
        this.productFilterBuilder.addProductSalesPriceFilter(lowerBound, upperBound, negated, options);
        return this;
    }
    /**
     * Filters the request to only return products within a certain list price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductListPriceFilter(lowerBound, upperBound, negated = false, options) {
        this.productFilterBuilder.addProductListPriceFilter(lowerBound, upperBound, negated, options);
        return this;
    }
    /**
     * Filters the request to only return variants within a certain sales price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantSalesPriceFilter(lowerBound, upperBound, negated = false, options) {
        this.variantFilterBuilder.addVariantSalesPriceFilter(lowerBound, upperBound, negated, options);
        return this;
    }
    /**
     * Filters the request to only return variants within a certain list price range.
     * @param lowerBound - Lower bound of the price range (inclusive).
     * @param upperBound - Upper bound of the price range (inclusive).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantListPriceFilter(lowerBound, upperBound, negated = false, options) {
        this.variantFilterBuilder.addVariantListPriceFilter(lowerBound, upperBound, negated, options);
        return this;
    }
    /**
     * Filters the request to only return variants with a certain specification.
     * @param key - Specification key.
     * @param equalTo - Specification value to match.
     * @param filterOutIfKeyIsNotFound - If true, filters out variants without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantSpecificationFilter(key, equalTo, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.variantFilterBuilder.addVariantSpecificationFilter(key, equalTo, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Combines filters using logical AND.
     * @param filterBuilder - Function to build the AND filter.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     * @throws Error if no filters are provided.
     */
    and(filterBuilder, negated = false, options) {
        var _a;
        const builder = new FilterBuilder();
        filterBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filters = builder.build();
        if (filters === null || filters.items === undefined || filters.items === null || filters.items.length <= 0) {
            throw new Error('And-filters must contain at least 1 filter');
        }
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.AndFilter, Relewise.Client',
            filters: filters.items,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Combines filters using logical OR.
     * @param filterBuilder - Function to build the OR filter.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     * @throws Error if no filters are provided.
     */
    or(filterBuilder, negated = false, options) {
        var _a;
        const builder = new FilterBuilder();
        filterBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filters = builder.build();
        if (filters === null || filters.items === undefined || filters.items === null || filters.items.length <= 0) {
            throw new Error('Or-filters must contain at least 1 filter');
        }
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.OrFilter, Relewise.Client',
            filters: filters.items,
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a product data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out products without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.productFilterBuilder.addProductDataFilter(key, conditionBuilder, mustMatchAllConditions, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Adds a variant data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out variants without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.variantFilterBuilder.addVariantDataFilter(key, conditionBuilder, mustMatchAllConditions, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Adds a brand data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out brands without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addBrandDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.brandFilterBuilder.addBrandDataFilter(key, conditionBuilder, mustMatchAllConditions, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Adds a cart data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out carts without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addCartDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        var _a;
        const builder = new ConditionBuilder();
        conditionBuilder(builder);
        const internalSettingsBuilder = new FilterSettingsBuilder();
        (_a = options === null || options === void 0 ? void 0 : options.filterSettings) === null || _a === void 0 ? void 0 : _a.call(options, internalSettingsBuilder);
        const filter = {
            $type: 'Relewise.Client.Requests.Filters.CartDataFilter, Relewise.Client',
            key: key,
            filterOutIfKeyIsNotFound: filterOutIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: builder.build(),
            negated: negated,
            settings: internalSettingsBuilder.build(),
        };
        this.filters.push(filter);
        return this;
    }
    /**
     * Adds a content category data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out content categories without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Adds a content data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out contents without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.contentFilterBuilder.addContentDataFilter(key, conditionBuilder, mustMatchAllConditions, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Adds a product category data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out product categories without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.productFilterBuilder.addProductCategoryDataFilter(key, conditionBuilder, mustMatchAllConditions, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Adds a company data filter to the request.
     * @param key - Data key.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param filterOutIfKeyIsNotFound - If true, filters out companies without the key (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addCompanyDataFilter(key, conditionBuilder, mustMatchAllConditions = true, filterOutIfKeyIsNotFound = true, negated = false, options) {
        this.companyFilterBuilder.addCompanyDataFilter(key, conditionBuilder, mustMatchAllConditions, filterOutIfKeyIsNotFound, negated, options);
        return this;
    }
    /**
     * Adds a product display name filter to the request.
     * @param conditionBuilder - Function to build the condition.
     * @param mustMatchAllConditions - If true, all conditions must be met (default is true).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductDisplayNameFilter(conditionBuilder, mustMatchAllConditions = true, negated = false, options) {
        this.productFilterBuilder.addProductDisplayNameFilter(conditionBuilder, mustMatchAllConditions, negated, options);
        return this;
    }
    /**
     * Adds a product and variant ID filter to the request.
     * @param products - Array of product and variant IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductAndVariantIdFilter(products, negated = false, options) {
        this.productFilterBuilder.addProductAndVariantIdFilter(products, negated, options);
        return this;
    }
    /**
     * Adds a product category level filter to the request.
     * @param levels - Array of category levels or a single level.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryLevelFilter(levels, negated = false, options) {
        this.productFilterBuilder.addProductCategoryLevelFilter(levels, negated, options);
        return this;
    }
    /**
     * Adds a product category has parent filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryHasParentFilter(categoryIds, negated = false, options) {
        this.productFilterBuilder.addProductCategoryHasParentFilter(categoryIds, negated, options);
        return this;
    }
    /**
     * Adds a product category has child filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryHasChildFilter(categoryIds, negated = false, options) {
        this.productFilterBuilder.addProductCategoryHasChildFilter(categoryIds, negated, options);
        return this;
    }
    /**
     * Adds a product category has ancestor filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryHasAncestorFilter(categoryIds, negated = false, options) {
        this.productFilterBuilder.addProductCategoryHasAncestorFilter(categoryIds, negated, options);
        return this;
    }
    /**
     * Adds a content category level filter to the request.
     * @param levels - Array of category levels or a single level.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryLevelFilter(levels, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryLevelFilter(levels, negated, options);
        return this;
    }
    /**
     * Adds a content category has parent filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryHasParentFilter(categoryIds, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryHasParentFilter(categoryIds, negated, options);
        return this;
    }
    /**
     * Adds a content category has child filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryHasChildFilter(categoryIds, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryHasChildFilter(categoryIds, negated, options);
        return this;
    }
    /**
     * Adds a content category has ancestor filter to the request.
     * @param categoryIds - Array of category IDs or a single ID (optional).
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryHasAncestorFilter(categoryIds, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryHasAncestorFilter(categoryIds, negated, options);
        return this;
    }
    /**
     * Adds a product category has products filter to the request ensuring that only categories with products in them are returned.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductCategoryHasProductsFilter(negated = false, options) {
        this.productFilterBuilder.addProductCategoryHasProductsFilter(negated, options);
        return this;
    }
    /**
     * Adds a content category has contents filter to the request ensuring that only categories with content in them are returned.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryHasContentsFilter(negated = false, options) {
        this.contentFilterBuilder.addContentCategoryHasContentsFilter(negated, options);
        return this;
    }
    /**
     * Adds a brand data has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addBrandDataHasKeyFilter(key, negated = false, options) {
        this.brandFilterBuilder.addBrandDataHasKeyFilter(key, negated, options);
        return this;
    }
    /**
     * Adds a brand is disabled filter to the request. Only works for brand queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addBrandDisabledFilter(negated = false, options) {
        this.brandFilterBuilder.addBrandDisabledFilter(negated, options);
        return this;
    }
    /**
     * Adds a company data has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addCompanyDataHasKeyFilter(key, negated = false, options) {
        this.companyFilterBuilder.addCompanyDataHasKeyFilter(key, negated, options);
        return this;
    }
    /**
     * Adds a company is disabled filter to the request. Only works for company queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addCompanyDisabledFilter(negated = false, options) {
        this.companyFilterBuilder.addCompanyDisabledFilter(negated, options);
        return this;
    }
    /**
     * Adds a variant data has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantDataHasKeyFilter(key, negated = false, options) {
        this.variantFilterBuilder.addVariantDataHasKeyFilter(key, negated, options);
        return this;
    }
    /**
     * Adds a variant is disabled filter to the request. Only works for product queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addVariantDisabledFilter(negated = false, options) {
        this.variantFilterBuilder.addVariantDisabledFilter(negated, options);
        return this;
    }
    /**
     * Adds a content category data has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryDataHasKeyFilter(key, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryDataHasKeyFilter(key, negated, options);
        return this;
    }
    /**
     * Adds a content category is disabled filter to the request. Only works for content queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryDisabledFilter(negated = false, options) {
        this.contentFilterBuilder.addContentCategoryDisabledFilter(negated, options);
        return this;
    }
    /**
     * Adds a content category recently viewed by user filter to the request.
     * @param sinceMinutesAgo - Time in minutes since the content category was viewed.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentCategoryRecentlyViewedByUserFilter(sinceMinutesAgo, negated = false, options) {
        this.contentFilterBuilder.addContentCategoryRecentlyViewedByUserFilter(sinceMinutesAgo, negated, options);
        return this;
    }
    /**
     * Adds a content data has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentDataHasKeyFilter(key, negated = false, options) {
        this.contentFilterBuilder.addContentDataHasKeyFilter(key, negated, options);
        return this;
    }
    /**
     * Adds a content is disabled filter to the request. Only works for content queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentDisabledFilter(negated = false, options) {
        this.contentFilterBuilder.addContentDisabledFilter(negated, options);
        return this;
    }
    /**
     * Adds a content recently viewed by user filter to the request.
     * @param sinceMinutesAgo - Time in minutes since the content was viewed.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentRecentlyViewedByUserFilter(sinceMinutesAgo, negated = false, options) {
        this.contentFilterBuilder.addContentRecentlyViewedByUserFilter(sinceMinutesAgo, negated, options);
        return this;
    }
    /**
     * Adds a content has categories filter to the request.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addContentHasCategoriesFilter(negated = false, options) {
        this.contentFilterBuilder.addContentHasCategoriesFilter(negated, options);
        return this;
    }
    /**
     * Adds a product is disabled filter to the request. Only works for product queries, not in searches or recommendations.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductDisabledFilter(negated = false, options) {
        this.productFilterBuilder.addProductDisabledFilter(negated, options);
        return this;
    }
    /**
     * Adds a product data has key filter to the request.
     * @param key - Data key.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductDataHasKeyFilter(key, negated = false, options) {
        this.productFilterBuilder.addProductDataHasKeyFilter(key, negated, options);
        return this;
    }
    /**
     * Adds a product has categories filter to the request.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductHasCategoriesFilter(negated = false, options) {
        this.productFilterBuilder.addProductHasCategoriesFilter(negated, options);
        return this;
    }
    /**
     * Adds a filter to only return products recently purchased by a company.
     * @param sinceMinutesAgo - Time in minutes since the purchase.
     * @param companyIds - Array of company IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByCompanyFilter(sinceMinutesAgo, companyIds, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyPurchasedByCompanyFilter(sinceMinutesAgo, companyIds, negated, options);
        return this;
    }
    /**
     * Adds a filter to only return products recently purchased by the user's company.
     * @param sinceMinutesAgo - Time in minutes since the purchase.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByUserCompanyFilter(sinceMinutesAgo, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyPurchasedByUserCompanyFilter(sinceMinutesAgo, negated, options);
        return this;
    }
    /**
     * Adds a filter to only return products recently purchased by the user's parent company.
     * @param sinceMinutesAgo - Time in minutes since the purchase.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyPurchasedByUserParentCompanyFilter(sinceMinutesAgo, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyPurchasedByUserParentCompanyFilter(sinceMinutesAgo, negated, options);
        return this;
    }
    /**
     * Adds a filter to only return products recently viewed by a company.
     * @param sinceMinutesAgo - Time in minutes since the view.
     * @param companyIds - Array of company IDs or a single ID.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByCompanyFilter(sinceMinutesAgo, companyIds, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyViewedByCompanyFilter(sinceMinutesAgo, companyIds, negated, options);
        return this;
    }
    /**
     * Adds a filter to only return products recently viewed by the user's company.
     * @param sinceMinutesAgo - Time in minutes since the view.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByUserCompanyFilter(sinceMinutesAgo, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyViewedByUserCompanyFilter(sinceMinutesAgo, negated, options);
        return this;
    }
    /**
     * Adds a filter to only return products recently viewed by the user's parent company.
     * @param sinceMinutesAgo - Time in minutes since the view.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The FilterBuilder instance for chaining.
     */
    addProductRecentlyViewedByUserParentCompanyFilter(sinceMinutesAgo, negated = false, options) {
        this.productFilterBuilder.addProductRecentlyViewedByUserParentCompanyFilter(sinceMinutesAgo, negated, options);
        return this;
    }
    /**
     * Adds a filter to only return products in the user's cart.
     * @param negated - If true, negates the filter (default is false).
     * @param options - Optional settings for the filter.
     * @returns The ProductFilterBuilder instance for chaining.
     */
    addProductInCartFilter(negated = false, options) {
        this.productFilterBuilder.addProductInCartFilter(negated, options);
        return this;
    }
    /**
     * Resets all filters and filter builders.
     * @returns The FilterBuilder instance for chaining.
     */
    reset() {
        this.filters = [];
        this.productFilterBuilder.reset();
        this.brandFilterBuilder.reset();
        this.contentFilterBuilder.reset();
        this.variantFilterBuilder.reset();
        this.companyFilterBuilder.reset();
        return this;
    }
    /**
     * Builds and combines all filters into a FilterCollection.
     * @returns The combined FilterCollection or null if no filters are set.
     */
    build() {
        var _a, _b, _c, _d, _e, _f;
        const productFilters = this.productFilterBuilder.build();
        const brandFilters = this.brandFilterBuilder.build();
        const contentFilters = this.contentFilterBuilder.build();
        const variantFilters = this.variantFilterBuilder.build();
        const companyFilters = this.companyFilterBuilder.build();
        const combinedFilters = [
            ...((_a = this.filters) !== null && _a !== void 0 ? _a : []),
            ...((_b = productFilters === null || productFilters === void 0 ? void 0 : productFilters.items) !== null && _b !== void 0 ? _b : []),
            ...((_c = brandFilters === null || brandFilters === void 0 ? void 0 : brandFilters.items) !== null && _c !== void 0 ? _c : []),
            ...((_d = contentFilters === null || contentFilters === void 0 ? void 0 : contentFilters.items) !== null && _d !== void 0 ? _d : []),
            ...((_e = variantFilters === null || variantFilters === void 0 ? void 0 : variantFilters.items) !== null && _e !== void 0 ? _e : []),
            ...((_f = companyFilters === null || companyFilters === void 0 ? void 0 : companyFilters.items) !== null && _f !== void 0 ? _f : []),
        ];
        return combinedFilters.length === 0 ? null : { items: combinedFilters };
    }
}

class PaginationBuilder {
    constructor() {
        this.pageNumber = 1;
        this.pageSize = 10;
    }
    /**
     * Defines how many results to return
     * @param pageSize
     * @returns
     */
    setPageSize(pageSize) {
        if (pageSize < 0) {
            throw new Error('pageSize can not be below 0');
        }
        this.pageSize = pageSize;
        return this;
    }
    /**
     * Page starts at 1, so this to skip 'X' pages of results
     * @param pageNumber
     * @returns
     */
    setPage(pageNumber) {
        if (pageNumber < 1) {
            throw new Error('pageNumber can not be below 1');
        }
        this.pageNumber = pageNumber;
        return this;
    }
    build() {
        return {
            take: this.pageSize,
            skip: (this.pageNumber - 1) * this.pageSize,
        };
    }
}

class RelevanceModifierBuilder {
    constructor() {
        this.modifiers = [];
    }
    addBrandIdRelevanceModifier(brandId, ifProductIsBrandMultiplyWeightBy = 1, ifProductIsNotBrandMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.BrandIdRelevanceModifier, Relewise.Client',
            ifProductIsBrandMultiplyWeightBy: ifProductIsBrandMultiplyWeightBy,
            ifProductIsNotBrandMultiplyWeightBy: ifProductIsNotBrandMultiplyWeightBy,
            brandId: brandId,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductAssortmentRelevanceModifier(assortments, multiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductAssortmentRelevanceModifier, Relewise.Client',
            assortments: assortments,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addVariantAssortmentRelevanceModifier(assortments, multiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.VariantAssortmentRelevanceModifier, Relewise.Client',
            assortments: assortments,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductCategoryIdRelevanceModifier(categoryId, evaluationScope, multiplyWeightBy = 1, negated = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductCategoryIdRelevanceModifier, Relewise.Client',
            categoryId: categoryId,
            evaluationScope: evaluationScope,
            negated: negated,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductDataRelevanceModifier(key, conditions, multiplierSelector, mustMatchAllConditions = true, considerAsMatchIfKeyIsNotFound = false, filter) {
        var _a;
        const conditionBuilder = new ConditionBuilder();
        conditions(conditionBuilder);
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductDataRelevanceModifier, Relewise.Client',
            key: key,
            considerAsMatchIfKeyIsNotFound: considerAsMatchIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: (_a = conditionBuilder.build()) === null || _a === void 0 ? void 0 : _a.items,
            multiplierSelector: multiplierSelector,
            multiplyWeightBy: 0,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addVariantDataRelevanceModifier(key, conditions, multiplierSelector, mustMatchAllConditions = true, considerAsMatchIfKeyIsNotFound = false, filter) {
        var _a;
        const conditionBuilder = new ConditionBuilder();
        conditions(conditionBuilder);
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.VariantDataRelevanceModifier, Relewise.Client',
            key: key,
            considerAsMatchIfKeyIsNotFound: considerAsMatchIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: (_a = conditionBuilder.build()) === null || _a === void 0 ? void 0 : _a.items,
            multiplierSelector: multiplierSelector,
            multiplyWeightBy: 0,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addContentCategoryDataRelevanceModifier(key, conditions, multiplierSelector, mustMatchAllConditions = true, considerAsMatchIfKeyIsNotFound = false, filter) {
        var _a;
        const conditionBuilder = new ConditionBuilder();
        conditions(conditionBuilder);
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ContentCategoryDataRelevanceModifier, Relewise.Client',
            key: key,
            considerAsMatchIfKeyIsNotFound: considerAsMatchIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: (_a = conditionBuilder.build()) === null || _a === void 0 ? void 0 : _a.items,
            multiplierSelector: multiplierSelector,
            multiplyWeightBy: 0,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addContentDataRelevanceModifier(key, conditions, multiplierSelector, mustMatchAllConditions = true, considerAsMatchIfKeyIsNotFound = false, filter) {
        var _a;
        const conditionBuilder = new ConditionBuilder();
        conditions(conditionBuilder);
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ContentDataRelevanceModifier, Relewise.Client',
            key: key,
            considerAsMatchIfKeyIsNotFound: considerAsMatchIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: (_a = conditionBuilder.build()) === null || _a === void 0 ? void 0 : _a.items,
            multiplierSelector: multiplierSelector,
            multiplyWeightBy: 0,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductCategoryDataRelevanceModifier(key, conditions, multiplierSelector, mustMatchAllConditions = true, considerAsMatchIfKeyIsNotFound = false, filter) {
        var _a;
        const conditionBuilder = new ConditionBuilder();
        conditions(conditionBuilder);
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductCategoryDataRelevanceModifier, Relewise.Client',
            key: key,
            considerAsMatchIfKeyIsNotFound: considerAsMatchIfKeyIsNotFound,
            mustMatchAllConditions: mustMatchAllConditions,
            conditions: (_a = conditionBuilder.build()) === null || _a === void 0 ? void 0 : _a.items,
            multiplierSelector: multiplierSelector,
            multiplyWeightBy: 0,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addVariantIdRelevanceModifier(variantIds, multiplyWeightBy = 1, negated = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.VariantIdRelevanceModifier, Relewise.Client',
            variantIds: variantIds,
            negated: negated,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductIdRelevanceModifier(productIds, multiplyWeightBy = 1, negated = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductIdRelevanceModifier, Relewise.Client',
            productIds: productIds,
            negated: negated,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductListPriceRelevanceModifier(currency, lowerBound, upperBound, multiplyWeightBy = 1, negated = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductListPriceRelevanceModifier, Relewise.Client',
            range: { lowerBoundInclusive: lowerBound, upperBoundInclusive: upperBound },
            currency: { value: currency },
            negated: negated,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductSalesPriceRelevanceModifier(currency, lowerBound, upperBound, multiplyWeightBy = 1, negated = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductSalesPriceRelevanceModifier, Relewise.Client',
            range: { lowerBoundInclusive: lowerBound, upperBoundInclusive: upperBound },
            currency: { value: currency },
            negated: negated,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addVariantListPriceRelevanceModifier(currency, lowerBound, upperBound, multiplyWeightBy = 1, negated = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.VariantListPriceRelevanceModifier, Relewise.Client',
            range: { lowerBoundInclusive: lowerBound, upperBoundInclusive: upperBound },
            currency: { value: currency },
            negated: negated,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addVariantSalesPriceRelevanceModifier(currency, lowerBound, upperBound, multiplyWeightBy = 1, negated = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.VariantSalesPriceRelevanceModifier, Relewise.Client',
            range: { lowerBoundInclusive: lowerBound, upperBoundInclusive: upperBound },
            currency: { value: currency },
            negated: negated,
            multiplyWeightBy: multiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addVariantSpecificationsInCommonRelevanceModifier(specificationKeysAndMultipliers, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.VariantSpecificationsInCommonRelevanceModifier, Relewise.Client',
            specificationKeysAndMultipliers,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addVariantSpecificationValueRelevanceModifier(key, value, ifIdenticalMultiplyWeightBy = 1, ifNotIdenticalMultiplyWeightBy = 0, ifSpecificationKeyNotFoundApplyNotEqualMultiplier = false, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.VariantSpecificationValueRelevanceModifier, Relewise.Client',
            key,
            value,
            ifIdenticalMultiplyWeightBy,
            ifNotIdenticalMultiplyWeightBy,
            ifSpecificationKeyNotFoundApplyNotEqualMultiplier,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductRecentlyPurchasedByUserRelevanceModifier(sinceUtc, ifNotPreviouslyPurchasedByUserMultiplyWeightBy = 1, ifPreviouslyPurchasedByUserMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductRecentlyPurchasedByUserRelevanceModifier, Relewise.Client',
            ifNotPreviouslyPurchasedByUserMultiplyWeightBy,
            ifPreviouslyPurchasedByUserMultiplyWeightBy,
            sinceUtc: sinceUtc.toJSON(),
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductRecentlyPurchasedByCompanyRelevanceModifier(sinceMinutesAgo, companyIds, ifPurchasedByCompanyMultiplyWeightBy = 1, elseIfNotPurchasedByCompanyMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductRecentlyPurchasedByCompanyRelevanceModifier, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            companyIds: companyIds,
            ifPurchasedByCompanyMultiplyWeightBy,
            elseIfNotPurchasedByCompanyMultiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductRecentlyPurchasedByUserCompanyRelevanceModifier(sinceMinutesAgo, ifPurchasedByCompanyMultiplyWeightBy = 1, elseIfPurchasedByParentCompanyMultiplyWeightBy = 1, elseIfNotPurchasedByEitherCompanyMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductRecentlyPurchasedByUserCompanyRelevanceModifier, Relewise.Client',
            sinceMinutesAgo: sinceMinutesAgo,
            ifPurchasedByCompanyMultiplyWeightBy,
            elseIfPurchasedByParentCompanyMultiplyWeightBy,
            elseIfNotPurchasedByEitherCompanyMultiplyWeightBy,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductRecentlyViewedByUserRelevanceModifier(sinceUtc, ifNotPreviouslyViewedByUserMultiplyWeightBy = 1, ifPreviouslyViewedByUserMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductRecentlyViewedByUserRelevanceModifier, Relewise.Client',
            ifNotPreviouslyViewedByUserMultiplyWeightBy,
            ifPreviouslyViewedByUserMultiplyWeightBy,
            sinceUtc: sinceUtc.toJSON(),
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductRecentlyViewedByCompanyRelevanceModifier(sinceMinutesAgo, companyIds, ifViewedByCompanyMultiplyWeightBy = 1, elseIfNotViewedByCompanyMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductRecentlyViewedByCompanyRelevanceModifier, Relewise.Client',
            companyIds,
            ifViewedByCompanyMultiplyWeightBy,
            elseIfNotViewedByCompanyMultiplyWeightBy,
            sinceMinutesAgo: sinceMinutesAgo,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductRecentlyViewedByUserCompanyRelevanceModifier(sinceMinutesAgo, ifViewedByUserCompanyMultiplyWeightBy = 1, elseIfViewedByUserParentCompanyMultiplyWeightBy = 1, elseIfNotViewedByEitherCompanyMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductRecentlyViewedByUserCompanyRelevanceModifier, Relewise.Client',
            ifViewedByUserCompanyMultiplyWeightBy,
            elseIfViewedByUserParentCompanyMultiplyWeightBy,
            elseIfNotViewedByEitherCompanyMultiplyWeightBy,
            sinceMinutesAgo: sinceMinutesAgo,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addProductCategoryRecentlyViewedByUserRelevanceModifier(sinceUtc, ifNotPreviouslyViewedByUserMultiplyWeightBy = 1, ifPreviouslyViewedByUserMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ProductCategoryRecentlyViewedByUserRelevanceModifier, Relewise.Client',
            ifNotPreviouslyViewedByUserMultiplyWeightBy,
            ifPreviouslyViewedByUserMultiplyWeightBy,
            sinceUtc: sinceUtc.toJSON(),
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addContentRecentlyViewedByUserRelevanceModifier(sinceUtc, ifNotPreviouslyViewedByUserMultiplyWeightBy = 1, ifPreviouslyViewedByUserMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ContentRecentlyViewedByUserRelevanceModifier, Relewise.Client',
            ifNotPreviouslyViewedByUserMultiplyWeightBy,
            ifPreviouslyViewedByUserMultiplyWeightBy,
            sinceUtc: sinceUtc.toJSON(),
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addContentCategoryRecentlyViewedByUserRelevanceModifier(sinceUtc, ifNotPreviouslyViewedByUserMultiplyWeightBy = 1, ifPreviouslyViewedByUserMultiplyWeightBy = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.ContentCategoryRecentlyViewedByUserRelevanceModifier, Relewise.Client',
            ifNotPreviouslyViewedByUserMultiplyWeightBy,
            ifPreviouslyViewedByUserMultiplyWeightBy,
            sinceUtc: sinceUtc.toJSON(),
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    addUserFavoriteProductRelevanceModifier(sinceMinutesAgo, ifNotPurchasedBaseWeight = 1, mostRecentPurchaseWeight = 1, numberOfPurchasesWeight = 1, filter) {
        const filterBuilder = new FilterBuilder();
        if (filter) {
            filter(filterBuilder);
        }
        const modifier = {
            $type: 'Relewise.Client.Requests.RelevanceModifiers.UserFavoriteProductRelevanceModifier, Relewise.Client',
            ifNotPurchasedBaseWeight,
            mostRecentPurchaseWeight,
            numberOfPurchasesWeight,
            sinceMinutesAgo: sinceMinutesAgo,
            filters: filterBuilder.build(),
        };
        this.modifiers.push(modifier);
        return this;
    }
    build() {
        return this.modifiers.length === 0
            ? null
            : { items: this.modifiers };
    }
}

class DataObjectFacetBuilder {
    constructor() {
        this.facets = [];
    }
    addDataObjectFacet(key, builder, filter, facetSettings) {
        var _a, _b;
        const facetBuilder = new DataObjectFacetBuilder();
        if (builder) {
            builder(facetBuilder);
        }
        const conditionsBuilder = new DataObjectFilterConditionBuilder();
        if (filter === null || filter === void 0 ? void 0 : filter.conditions) {
            filter.conditions(conditionsBuilder);
        }
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.DataObjectFacet, Relewise.Client',
            field: 'Data',
            key: key,
            items: (_a = facetBuilder.build()) !== null && _a !== void 0 ? _a : [],
            filter: {
                conditions: (_b = conditionsBuilder.build()) !== null && _b !== void 0 ? _b : [],
                take: filter === null || filter === void 0 ? void 0 : filter.take,
                skip: filter === null || filter === void 0 ? void 0 : filter.skip,
            },
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addStringFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.DataObjectStringValueFacet, Relewise.Client',
            field: 'Data',
            key: key,
            selected: selectedValues,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addBooleanFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.DataObjectBooleanValueFacet, Relewise.Client',
            field: 'Data',
            key: key,
            selected: selectedValues,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addNumberFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.DataObjectDoubleValueFacet, Relewise.Client',
            field: 'Data',
            key: key,
            selected: selectedValues,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addNumberRangeFacet(key, lowerBound, upperBound, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.DataObjectDoubleRangeFacet, Relewise.Client',
            field: 'Data',
            key: key,
            selected: {
                lowerBoundInclusive: lowerBound,
                upperBoundInclusive: upperBound,
            },
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addNumberRangesFacet(key, predefinedRanges, expandedRangeSize, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.DataObjectDoubleRangesFacet, Relewise.Client',
            field: 'Data',
            key: key,
            settings: facetSettings,
            predefinedRanges: predefinedRanges === null || predefinedRanges === void 0 ? void 0 : predefinedRanges.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            expandedRangeSize: expandedRangeSize,
            selected: selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
        };
        this.facets.push(facet);
        return this;
    }
    build() {
        return this.facets.length === 0
            ? null
            : this.facets;
    }
}

class FacetBuilder {
    constructor() {
        this.facets = [];
    }
    //#region Product
    addCategoryFacet(categorySelectionStrategy, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.CategoryFacet, Relewise.Client',
            categorySelectionStrategy: categorySelectionStrategy,
            field: 'Category',
            selected: selectedValues,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductCategoryHierarchyFacet(categorySelectionStrategy, selectedValues = null, selectedPropertiesSettings, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.CategoryHierarchyFacet, Relewise.Client',
            categorySelectionStrategy: categorySelectionStrategy,
            field: 'Category',
            selected: selectedValues,
            settings: facetSettings,
            selectedPropertiesSettings: selectedPropertiesSettings ? Object.assign({ $type: 'Relewise.Client.Requests.Shared.SelectedProductCategoryPropertiesSettings, Relewise.Client' }, selectedPropertiesSettings) : undefined,
        };
        this.facets.push(facet);
        return this;
    }
    addContentCategoryHierarchyFacet(categorySelectionStrategy, selectedValues = null, selectedPropertiesSettings, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.CategoryHierarchyFacet, Relewise.Client',
            categorySelectionStrategy: categorySelectionStrategy,
            field: 'Category',
            selected: selectedValues,
            settings: facetSettings,
            selectedPropertiesSettings: selectedPropertiesSettings ? Object.assign({ $type: 'Relewise.Client.Requests.Shared.SelectedContentCategoryPropertiesSettings, Relewise.Client' }, selectedPropertiesSettings) : undefined,
        };
        this.facets.push(facet);
        return this;
    }
    addBrandFacet(selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.BrandFacet, Relewise.Client',
            field: 'Brand',
            selected: selectedValues,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductAssortmentFacet(selectionStrategy, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductAssortmentFacet, Relewise.Client',
            field: 'Assortment',
            assortmentFilterType: 'Or',
            assortmentSelectionStrategy: selectionStrategy,
            selected: selectedValues,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addVariantSpecificationFacet(key, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.VariantSpecificationFacet, Relewise.Client',
            field: 'VariantSpecification',
            key: key,
            selected: selectedValues,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductDataDoubleRangeFacet(key, selectionStrategy, lowerBound, upperBound, facetSettings) {
        const selected = this.mapSelectedDoubleRange(lowerBound, upperBound);
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataDoubleRangeFacet, Relewise.Client',
            field: 'Data',
            key: key,
            dataSelectionStrategy: selectionStrategy,
            selected: selected,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductDataDoubleRangesFacet(key, selectionStrategy, predefinedRanges, expandedRangeSize, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataDoubleRangesFacet, Relewise.Client',
            field: 'Data',
            key: key,
            predefinedRanges: predefinedRanges === null || predefinedRanges === void 0 ? void 0 : predefinedRanges.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            expandedRangeSize: expandedRangeSize,
            selected: selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            dataSelectionStrategy: selectionStrategy,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductDataStringValueFacet(key, selectionStrategy, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataStringValueFacet, Relewise.Client',
            field: 'Data',
            key: key,
            dataSelectionStrategy: selectionStrategy,
            selected: selectedValues,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductDataBooleanValueFacet(key, selectionStrategy, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataBooleanValueFacet, Relewise.Client',
            field: 'Data',
            key: key,
            dataSelectionStrategy: selectionStrategy,
            selected: selectedValues,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductDataDoubleValueFacet(key, selectionStrategy, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataDoubleValueFacet, Relewise.Client',
            field: 'Data',
            key: key,
            dataSelectionStrategy: selectionStrategy,
            selected: selectedValues,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addSalesPriceRangeFacet(priceSelectionStrategy, lowerBound, upperBound, facetSettings) {
        const selected = this.mapSelectedDoubleRange(lowerBound, upperBound);
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.PriceRangeFacet, Relewise.Client',
            field: 'SalesPrice',
            selected: selected,
            priceSelectionStrategy,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addSalesPriceRangesFacet(priceSelectionStrategy, predefinedRanges, expandedRangeSize, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.PriceRangesFacet, Relewise.Client',
            field: 'SalesPrice',
            predefinedRanges: predefinedRanges === null || predefinedRanges === void 0 ? void 0 : predefinedRanges.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            expandedRangeSize: expandedRangeSize,
            selected: selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            priceSelectionStrategy,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addListPriceRangeFacet(priceSelectionStrategy, lowerBound, upperBound, facetSettings) {
        const selected = this.mapSelectedDoubleRange(lowerBound, upperBound);
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.PriceRangeFacet, Relewise.Client',
            field: 'ListPrice',
            selected: selected,
            priceSelectionStrategy,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addListPriceRangesFacet(priceSelectionStrategy, predefinedRanges, expandedRangeSize, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.PriceRangesFacet, Relewise.Client',
            field: 'ListPrice',
            predefinedRanges: predefinedRanges === null || predefinedRanges === void 0 ? void 0 : predefinedRanges.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            expandedRangeSize: expandedRangeSize,
            selected: selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            priceSelectionStrategy,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductDataObjectFacet(key, selectionStrategy, builder, filter, facetSettings) {
        var _a, _b;
        const facetBuilder = new DataObjectFacetBuilder();
        if (builder) {
            builder(facetBuilder);
        }
        const conditionsBuilder = new DataObjectFilterConditionBuilder();
        if (filter === null || filter === void 0 ? void 0 : filter.conditions) {
            filter.conditions(conditionsBuilder);
        }
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataObjectFacet, Relewise.Client',
            field: 'Data',
            items: (_a = facetBuilder.build()) !== null && _a !== void 0 ? _a : [],
            filter: {
                conditions: (_b = conditionsBuilder.build()) !== null && _b !== void 0 ? _b : [],
                take: filter === null || filter === void 0 ? void 0 : filter.take,
                skip: filter === null || filter === void 0 ? void 0 : filter.skip,
            },
            dataSelectionStrategy: selectionStrategy,
            settings: facetSettings,
            key: key,
        };
        this.facets.push(facet);
        return this;
    }
    addRecentlyPurchasedFacet(purchaseQualifiers, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.RecentlyPurchasedFacet, Relewise.Client',
            field: 'Data',
            settings: facetSettings,
            selected: selectedValues,
            purchaseQualifiers: purchaseQualifiers,
        };
        this.facets.push(facet);
        return this;
    }
    //#endregion
    //#region Content
    addContentAssortmentFacet(selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ContentAssortmentFacet, Relewise.Client',
            field: 'Assortment',
            assortmentFilterType: 'Or',
            selected: selectedValues,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addContentDataDoubleRangeFacet(key, lowerBound, upperBound, facetSettings) {
        const selected = this.mapSelectedDoubleRange(lowerBound, upperBound);
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ContentDataDoubleRangeFacet, Relewise.Client',
            field: 'Data',
            selected: selected,
            key: key,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addContentDataDoubleRangesFacet(key, predefinedRanges, expandedRangeSize, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataDoubleRangesFacet, Relewise.Client',
            field: 'Data',
            key: key,
            predefinedRanges: predefinedRanges === null || predefinedRanges === void 0 ? void 0 : predefinedRanges.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            expandedRangeSize: expandedRangeSize,
            selected: selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addContentDataStringValueFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ContentDataStringValueFacet, Relewise.Client',
            field: 'Data',
            selected: selectedValues,
            key: key,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addContentDataBooleanValueFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ContentDataBooleanValueFacet, Relewise.Client',
            field: 'Data',
            selected: selectedValues,
            key: key,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addContentDataDoubleValueFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ContentDataDoubleValueFacet, Relewise.Client',
            field: 'Data',
            selected: selectedValues,
            key: key,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addContentDataObjectFacet(key, builder, filter, facetSettings) {
        var _a, _b;
        const facetBuilder = new DataObjectFacetBuilder();
        if (builder) {
            builder(facetBuilder);
        }
        const conditionsBuilder = new DataObjectFilterConditionBuilder();
        if (filter === null || filter === void 0 ? void 0 : filter.conditions) {
            filter.conditions(conditionsBuilder);
        }
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ContentDataObjectFacet, Relewise.Client',
            field: 'Data',
            items: (_a = facetBuilder.build()) !== null && _a !== void 0 ? _a : [],
            filter: {
                conditions: (_b = conditionsBuilder.build()) !== null && _b !== void 0 ? _b : [],
                take: filter === null || filter === void 0 ? void 0 : filter.take,
                skip: filter === null || filter === void 0 ? void 0 : filter.skip,
            },
            settings: facetSettings,
            key: key,
        };
        this.facets.push(facet);
        return this;
    }
    //#endregion
    //#region ProductCategories
    addProductCategoryAssortmentFacet(selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductCategoryAssortmentFacet, Relewise.Client',
            field: 'Assortment',
            assortmentFilterType: 'Or',
            selected: selectedValues,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductCategoryDataDoubleRangeFacet(key, lowerBound, upperBound, facetSettings) {
        const selected = this.mapSelectedDoubleRange(lowerBound, upperBound);
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductCategoryDataDoubleRangeFacet, Relewise.Client',
            field: 'Data',
            selected: selected,
            key: key,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductCategoryDataDoubleRangesFacet(key, predefinedRanges, expandedRangeSize, selectedValues = null, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductDataDoubleRangesFacet, Relewise.Client',
            field: 'Data',
            key: key,
            predefinedRanges: predefinedRanges === null || predefinedRanges === void 0 ? void 0 : predefinedRanges.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            expandedRangeSize: expandedRangeSize,
            selected: selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map(x => ({ lowerBoundInclusive: x.lowerBound, upperBoundExclusive: x.upperBound })),
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductCategoryDataStringValueFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductCategoryDataStringValueFacet, Relewise.Client',
            field: 'Data',
            selected: selectedValues,
            key: key,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductCategoryDataBooleanValueFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductCategoryDataBooleanValueFacet, Relewise.Client',
            field: 'Data',
            selected: selectedValues,
            key: key,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductCategoryDataDoubleValueFacet(key, selectedValues = null, collectionFilterType, facetSettings) {
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductCategoryDataDoubleValueFacet, Relewise.Client',
            field: 'Data',
            selected: selectedValues,
            key: key,
            collectionFilterType: collectionFilterType,
            settings: facetSettings,
        };
        this.facets.push(facet);
        return this;
    }
    addProductCategoryDataObjectFacet(key, builder, filter, facetSettings) {
        var _a, _b;
        const facetBuilder = new DataObjectFacetBuilder();
        if (builder) {
            builder(facetBuilder);
        }
        const conditionsBuilder = new DataObjectFilterConditionBuilder();
        if (filter === null || filter === void 0 ? void 0 : filter.conditions) {
            filter.conditions(conditionsBuilder);
        }
        const facet = {
            $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.ProductCategoryDataObjectFacet, Relewise.Client',
            field: 'Data',
            items: (_a = facetBuilder.build()) !== null && _a !== void 0 ? _a : [],
            filter: {
                conditions: (_b = conditionsBuilder.build()) !== null && _b !== void 0 ? _b : [],
                take: filter === null || filter === void 0 ? void 0 : filter.take,
                skip: filter === null || filter === void 0 ? void 0 : filter.skip,
            },
            settings: facetSettings,
            key: key,
        };
        this.facets.push(facet);
        return this;
    }
    //#endregion
    build() {
        return this.facets.length === 0
            ? null
            : {
                items: this.facets,
                $type: 'Relewise.Client.DataTypes.Search.Facets.Queries.FacetQuery, Relewise.Client',
            };
    }
    mapSelectedDoubleRange(lowerBound, upperBound) {
        let selected = null;
        const lowerBoundHasValue = lowerBound !== null && lowerBound !== undefined;
        const upperBoundHasValue = upperBound !== null && upperBound !== undefined;
        if (lowerBoundHasValue || upperBoundHasValue) {
            selected = {};
            if (lowerBoundHasValue)
                selected.lowerBoundInclusive = lowerBound;
            if (upperBoundHasValue)
                selected.upperBoundInclusive = upperBound;
        }
        return selected;
    }
}

class DataObjectValueSelectorBuilder {
    select(key, settings) {
        var _a;
        if (!key)
            throw new Error('DataObjectValueSelector key can\'t be null or empty');
        this.key = key;
        if (settings) {
            if (settings.filter) {
                const conditionsBuilder = new DataObjectFilterConditionBuilder();
                if ((_a = settings.filter) === null || _a === void 0 ? void 0 : _a.conditions) {
                    settings.filter.conditions(conditionsBuilder);
                }
                this.filter = {
                    skip: settings.filter.skip,
                    take: settings.filter.take,
                    conditions: conditionsBuilder.build(),
                };
            }
            if (settings.childSelector) {
                const childSelector = new DataObjectValueSelectorBuilder();
                if (settings === null || settings === void 0 ? void 0 : settings.childSelector) {
                    settings === null || settings === void 0 ? void 0 : settings.childSelector(childSelector);
                }
                this.childSelector = childSelector.build();
            }
            if (settings.fallbackSelector) {
                const fallbackSelector = new DataObjectValueSelectorBuilder();
                if (settings === null || settings === void 0 ? void 0 : settings.fallbackSelector) {
                    settings === null || settings === void 0 ? void 0 : settings.fallbackSelector(fallbackSelector);
                }
                this.fallbackSelector = fallbackSelector.build();
            }
        }
    }
    build() {
        if (!this.key)
            throw new Error('DataObjectValueSelector key can\'t be null or empty - did you forget to use .select(\'key)?\'');
        return {
            key: this.key,
            filter: this.filter,
            childSelector: this.childSelector,
            fallbackSelector: this.fallbackSelector,
        };
    }
}

class ProductSortingBuilder {
    constructor() {
        this.value = null;
    }
    sortByProductData(key, selectionStrategy, order, thenBy, mode = 'Auto') {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Product.ProductDataSorting, Relewise.Client',
            dataSelectionStrategy: selectionStrategy,
            mode,
            order,
            key,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductDataObject(selectionStrategy, order, valueSelector, thenBy, mode = 'Auto') {
        var _a;
        const valueSelectorFactory = new DataObjectValueSelectorBuilder();
        valueSelector(valueSelectorFactory);
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Product.ProductDataObjectSorting, Relewise.Client',
            dataSelectionStrategy: selectionStrategy,
            mode,
            order,
            valueSelector: valueSelectorFactory.build(),
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductRelevance(order = 'Descending', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Product.ProductRelevanceSorting, Relewise.Client',
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductPopularity(order = 'Descending', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Product.ProductPopularitySorting, Relewise.Client',
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductAttribute(attribute, order, thenBy, mode = 'Auto') {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Product.ProductAttributeSorting, Relewise.Client',
            attribute,
            mode,
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductVariantAttribute(attribute, order, thenBy, mode = 'Auto') {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Product.ProductVariantAttributeSorting, Relewise.Client',
            attribute,
            mode,
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductVariantSpecification(key, order, thenBy, mode = 'Auto') {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Product.ProductVariantSpecificationSorting, Relewise.Client',
            key,
            mode,
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    thenBy(thenBy) {
        const thenByBuilder = new ProductSortingBuilder();
        if (thenBy) {
            thenBy(thenByBuilder);
            thenByBuilder.build();
        }
        return thenByBuilder;
    }
    build() {
        return this.value == null
            ? null
            : { value: this.value };
    }
}

class ContentSortingBuilder {
    constructor() {
        this.value = null;
    }
    sortByContentData(key, order = 'Descending', mode = 'Auto', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Content.ContentDataSorting, Relewise.Client',
            mode,
            order,
            key,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByContentRelevance(order = 'Descending', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Content.ContentRelevanceSorting, Relewise.Client',
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByContentPopularity(order = 'Descending', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Content.ContentPopularitySorting, Relewise.Client',
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByContentAttribute(attribute, order, mode = 'Auto', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.Content.ContentAttributeSorting, Relewise.Client',
            attribute,
            mode,
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    thenBy(thenBy) {
        const thenByBuilder = new ContentSortingBuilder();
        if (thenBy) {
            thenBy(thenByBuilder);
            thenByBuilder.build();
        }
        return thenByBuilder;
    }
    build() {
        return this.value == null
            ? null
            : { value: this.value };
    }
}

class ProductCategorySortingBuilder {
    constructor() {
        this.value = null;
    }
    sortByProductCategoryData(key, order = 'Descending', mode = 'Auto', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.ProductCategory.ProductCategoryDataSorting, Relewise.Client',
            mode,
            order,
            key,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductCategoryRelevance(order = 'Descending', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.ProductCategory.ProductCategoryRelevanceSorting, Relewise.Client',
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductCategoryPopularity(order = 'Descending', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.ProductCategory.ProductCategoryPopularitySorting, Relewise.Client',
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    sortByProductCategoryAttribute(attribute, order, mode = 'Auto', thenBy) {
        var _a;
        const sort = {
            $type: 'Relewise.Client.DataTypes.Search.Sorting.ProductCategory.ProductCategoryAttributeSorting, Relewise.Client',
            attribute,
            mode,
            order,
            thenBy: (_a = this.thenBy(thenBy)) === null || _a === void 0 ? void 0 : _a.value,
        };
        this.value = sort;
    }
    thenBy(thenBy) {
        const thenByBuilder = new ProductCategorySortingBuilder();
        if (thenBy) {
            thenBy(thenByBuilder);
        }
        return thenByBuilder;
    }
    build() {
        return this.value == null
            ? null
            : { value: this.value };
    }
}

class SearchRequestBuilder {
    constructor(settings) {
        this.settings = settings;
        this.filterBuilder = new FilterBuilder();
        this.postFilterBuilder = new FilterBuilder();
        this.relevanceModifiersBuilder = new RelevanceModifierBuilder();
    }
    /**
     * Adds filters to the request
     * @param filterBuilder
     * @returns
     */
    filters(filterBuilder) {
        filterBuilder(this.filterBuilder);
        return this;
    }
    /**
     * Adds post filters to the request
     * @param filterBuilder
     * @returns
     */
    postFilters(filterBuilder) {
        filterBuilder(this.postFilterBuilder);
        return this;
    }
    relevanceModifiers(relevanceModifiersBuilder) {
        relevanceModifiersBuilder(this.relevanceModifiersBuilder);
        return this;
    }
    /**
     * Use only when a specific index different from the 'default'-index is needed
     * @param id
     * @returns
     */
    setIndex(id) {
        this.indexId = id;
        return this;
    }
    baseBuild() {
        return Object.assign(Object.assign(Object.assign({}, (this.settings && {
            currency: { value: this.settings.currency },
            language: { value: this.settings.language },
            displayedAtLocation: this.settings.displayedAtLocation,
            user: this.settings.user,
        })), { filters: this.filterBuilder.build(), postFilters: this.postFilterBuilder.build(), relevanceModifiers: this.relevanceModifiersBuilder.build() }), (this.indexId && { indexSelector: { id: this.indexId } }));
    }
}

class ContentSearchBuilder extends SearchRequestBuilder {
    constructor(settings) {
        super(settings);
        this.facetBuilder = new FacetBuilder();
        this.paginationBuilder = new PaginationBuilder();
        this.sortingBuilder = new ContentSortingBuilder();
        this.searchSettings = {
            $type: 'Relewise.Client.Requests.Search.Settings.ContentSearchSettings, Relewise.Client',
            recommendations: {},
        };
    }
    setContentProperties(contentProperties) {
        this.searchSettings.selectedContentProperties = contentProperties;
        return this;
    }
    setRecommendationSettings(settings) {
        this.searchSettings.recommendations = settings;
        return this;
    }
    setTerm(term) {
        this.term = term;
        return this;
    }
    pagination(paginate) {
        paginate(this.paginationBuilder);
        return this;
    }
    facets(facets) {
        facets(this.facetBuilder);
        return this;
    }
    sorting(sorting) {
        sorting(this.sortingBuilder);
        return this;
    }
    build() {
        const { take, skip } = this.paginationBuilder.build();
        return Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Search.ContentSearchRequest, Relewise.Client' }, this.baseBuild()), { settings: this.searchSettings, take,
            skip, term: this.term, facets: this.facetBuilder.build(), sorting: this.sortingBuilder.build() });
    }
}

class ProductCategorySearchBuilder extends SearchRequestBuilder {
    constructor(settings) {
        super(settings);
        this.facetBuilder = new FacetBuilder();
        this.paginationBuilder = new PaginationBuilder();
        this.sortingBuilder = new ProductCategorySortingBuilder();
        this.searchSettings = {
            $type: 'Relewise.Client.Requests.Search.Settings.ProductCategorySearchSettings, Relewise.Client',
            recommendations: {},
        };
    }
    /**
     * Select the properties of the product category to be returned, by default only the product category id is returned.
     * @param productCategoryProperties
     */
    setSelectedCategoryProperties(productCategoryProperties) {
        this.searchSettings.selectedCategoryProperties = productCategoryProperties;
        return this;
    }
    setRecommendationSettings(settings) {
        this.searchSettings.recommendations = settings;
        return this;
    }
    /**
     * Set the term used to filter product categories by
     */
    setTerm(term) {
        this.term = term;
        return this;
    }
    pagination(paginate) {
        paginate(this.paginationBuilder);
        return this;
    }
    facets(facets) {
        facets(this.facetBuilder);
        return this;
    }
    sorting(sorting) {
        sorting(this.sortingBuilder);
        return this;
    }
    build() {
        const { take, skip } = this.paginationBuilder.build();
        return Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Search.ProductCategorySearchRequest, Relewise.Client' }, this.baseBuild()), { take,
            skip, term: this.term, facets: this.facetBuilder.build(), settings: this.searchSettings, sorting: this.sortingBuilder.build() });
    }
}

class SearchConstraintBuilder {
    constructor() {
        this.resultConstraint = null;
    }
    setResultMustHaveVariantConstraint(constaint) {
        const constraint = Object.assign({ $type: 'Relewise.Client.Requests.Search.Settings.ResultMustHaveVariantConstraint, Relewise.Client' }, constaint);
        this.resultConstraint = constraint;
        return this;
    }
    build() {
        // Do to how the data contracts are generated, resultsConstraints on searchSettings expect this specific type
        // Once more types are added it will expect the generic type and this cast should be removed and the generic type should be returned
        return this.resultConstraint;
    }
}

class ProductSearchBuilder extends SearchRequestBuilder {
    constructor(settings) {
        super(settings);
        this.facetBuilder = new FacetBuilder();
        this.retailMediaQuery = null;
        this.paginationBuilder = new PaginationBuilder();
        this.sortingBuilder = new ProductSortingBuilder();
        this.searchConstraintBuilder = new SearchConstraintBuilder();
        this.searchSettings = {
            $type: 'Relewise.Client.Requests.Search.Settings.ProductSearchSettings, Relewise.Client',
            recommendations: {},
        };
    }
    /**
     * Select the properties of the product to be returned, by default only the product id is returned.
     * @param productProperties
     */
    setSelectedProductProperties(productProperties) {
        this.searchSettings.selectedProductProperties = productProperties;
        return this;
    }
    /**
    * Select the properties of the variant to be returned, by default only the variant id is returned.
    * @param variantProperties
    */
    setSelectedVariantProperties(variantProperties) {
        this.searchSettings.selectedVariantProperties = variantProperties;
        return this;
    }
    /**
     * Select the properties of the brand to be returned, by default only the brand id is returned.
     * @param brandProperties
     */
    setSelectedBrandProperties(brandProperties) {
        this.searchSettings.selectedBrandProperties = brandProperties;
        return this;
    }
    setVariantSearchSettings(variantSearchSettings) {
        this.searchSettings.variantSettings = variantSearchSettings;
        return this;
    }
    setExplodedVariants(count) {
        this.searchSettings.explodedVariants = count;
        return this;
    }
    setRecommendationSettings(settings) {
        this.searchSettings.recommendations = settings;
        return this;
    }
    setRetailMedia(query) {
        this.retailMediaQuery = query;
        return this;
    }
    /**
     * Set the term used to filter products by
     */
    setTerm(term) {
        this.term = term;
        return this;
    }
    pagination(paginate) {
        paginate(this.paginationBuilder);
        return this;
    }
    facets(facets) {
        facets(this.facetBuilder);
        return this;
    }
    sorting(sorting) {
        sorting(this.sortingBuilder);
        return this;
    }
    searchConstraints(searchConstraintbuilder) {
        searchConstraintbuilder(this.searchConstraintBuilder);
        this.searchSettings.resultConstraint = this.searchConstraintBuilder.build();
        return this;
    }
    build() {
        const { take, skip } = this.paginationBuilder.build();
        return Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Search.ProductSearchRequest, Relewise.Client' }, this.baseBuild()), { take,
            skip, term: this.term, facets: this.facetBuilder.build(), settings: this.searchSettings, sorting: this.sortingBuilder.build(), retailMedia: this.retailMediaQuery });
    }
}

class SearchCollectionBuilder extends SearchRequestBuilder {
    constructor(settings) {
        super(settings);
        this.requests = [];
    }
    addRequest(request) {
        this.requests.push(request);
        return this;
    }
    build() {
        return Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Search.SearchRequestCollection, Relewise.Client' }, this.baseBuild()), { requests: this.requests });
    }
}

class SearchTermPredictionBuilder extends SearchRequestBuilder {
    constructor(settings) {
        super(settings);
        this.count = 0;
        this.term = '';
        this.targetEntityTypes = null;
    }
    take(count) {
        this.count = count;
        return this;
    }
    setTerm(term) {
        this.term = term;
        return this;
    }
    addEntityType(...types) {
        this.targetEntityTypes = types;
        return this;
    }
    build() {
        return Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Search.SearchTermPredictionRequest, Relewise.Client' }, this.baseBuild()), { term: this.term, take: this.count, settings: {
                $type: 'Relewise.Client.Requests.Search.Settings.SearchTermPredictionSettings, Relewise.Client',
                targetEntityTypes: this.targetEntityTypes,
            } });
    }
}

class GetProductFacet {
    static productAssortment(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets
            .items
            .find((item) => '$type' in item &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.ProductAssortmentFacetResult, Relewise.Client' &&
            'field' in item &&
            item.field === 'Assortment' &&
            'assortmentSelectionStrategy' in item &&
            item.assortmentSelectionStrategy === selectionStrategy) || null;
    }
    static brand(facets) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets
            .items
            .find((item) => '$type' in item &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.BrandFacetResult, Relewise.Client' &&
            'field' in item &&
            item.field === 'Brand') || null;
    }
    static category(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets
            .items
            .find((item) => '$type' in item &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.CategoryFacetResult, Relewise.Client' &&
            'categorySelectionStrategy' in item
            && item.categorySelectionStrategy === selectionStrategy) || null;
    }
    static categoryHierarchy(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets
            .items
            .find((item) => '$type' in item &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.CategoryHierarchyFacet, Relewise.Client' &&
            'categorySelectionStrategy' in item &&
            item.categorySelectionStrategy === selectionStrategy) || null;
    }
    static listPriceRange(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'ListPrice' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.PriceRangeFacetResult, Relewise.Client' &&
            'priceSelectionStrategy' in item &&
            item.priceSelectionStrategy === selectionStrategy) || null;
    }
    static salesPriceRange(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'SalesPrice' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.PriceRangeFacetResult, Relewise.Client' &&
            'priceSelectionStrategy' in item &&
            item.priceSelectionStrategy === selectionStrategy) || null;
    }
    static listPriceRanges(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'ListPrice' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.PriceRangesFacetResult, Relewise.Client' &&
            'priceSelectionStrategy' in item &&
            item.priceSelectionStrategy === selectionStrategy) || null;
    }
    static listPriceRangesWithRange(facets, selectionStrategy, expandedRangeSize) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'ListPrice' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.PriceRangesFacetResult, Relewise.Client' &&
            'priceSelectionStrategy' in item &&
            item.priceSelectionStrategy === selectionStrategy &&
            'expandedRangeSize' in item &&
            item.expandedRangeSize === expandedRangeSize) || null;
    }
    static salesPriceRanges(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'SalesPrice' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.PriceRangesFacetResult, Relewise.Client' &&
            'priceSelectionStrategy' in item &&
            item.priceSelectionStrategy === selectionStrategy) || null;
    }
    static salesPriceRangesWithRange(facets, selectionStrategy, expandedRangeSize) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'SalesPrice' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.PriceRangesFacetResult, Relewise.Client' &&
            'priceSelectionStrategy' in item &&
            item.priceSelectionStrategy === selectionStrategy &&
            'expandedRangeSize' in item &&
            item.expandedRangeSize === expandedRangeSize) || null;
    }
    static dataDoubleRange(facets, selectionStrategy, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.ProductDataDoubleRangeFacetResult, Relewise.Client' &&
            'dataSelectionStrategy' in item &&
            item.dataSelectionStrategy === selectionStrategy &&
            'key' in item &&
            item.key === key) || null;
    }
    static dataDoubleRanges(facets, selectionStrategy, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.ProductDataDoubleRangesFacetResult, Relewise.Client' &&
            'dataSelectionStrategy' in item &&
            item.dataSelectionStrategy === selectionStrategy &&
            'key' in item &&
            item.key === key) || null;
    }
    static variantSpecification(facets, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets
            .items
            .find((item) => '$type' in item &&
            item.$type === 'Relewise.Client.DataTypes.Search.items.Result.VariantSpecificationFacetResult, Relewise.Client' &&
            'field' in item &&
            item.field === 'VariantSpecification' &&
            'key' in item && item.key === key) || null;
    }
    static dataString(facets, key, selectionStrategy) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ProductDataStringValueFacetResult, Relewise.Client', selectionStrategy, key);
    }
    static dataBoolean(facets, key, selectionStrategy) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ProductDataBooleanValueFacetResult, Relewise.Client', selectionStrategy, key);
    }
    static dataNumber(facets, key, selectionStrategy) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ProductDataDoubleValueFacetResult, Relewise.Client', selectionStrategy, key);
    }
    static dataObject(facets, selectionStrategy, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return (facets.items.find((a) => a.$type === 'Relewise.Client.DataTypes.Search.Facets.Result.ProductDataObjectFacetResult, Relewise.Client' &&
            a.field === 'Data' &&
            a.key === key &&
            a.dataSelectionStrategy === selectionStrategy) || null);
    }
    static data(facets, $type, selectionStrategy, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return (facets.items.find((a) => a.$type === $type &&
            a.field === 'Data' &&
            'dataSelectionStrategy' in a && a.dataSelectionStrategy === selectionStrategy &&
            'key' in a && a.key === key) || null);
    }
}

class GetContentFacet {
    constructor(items) {
        this.items = items;
    }
    static category(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Category' &&
            item.$type === 'CategoryFacetResult' &&
            'categorySelectionStrategy' in item &&
            item.categorySelectionStrategy === selectionStrategy) || null;
    }
    static categoryHierarchy(facets, selectionStrategy) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Category' &&
            item.$type === 'CategoryHierarchyFacetResult' &&
            'categorySelectionStrategy' in item &&
            item.categorySelectionStrategy === selectionStrategy) || null;
    }
    static assortment(facets) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Assortment' &&
            item.$type === 'ContentAssortmentFacetResult') || null;
    }
    static dataDoubleRange(facets, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'ContentDataDoubleRangeFacetResult' &&
            'key' in item &&
            item.key === key) || null;
    }
    static dataDoubleRanges(facets, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'ContentDataDoubleRangesFacetResult' &&
            'key' in item &&
            item.key === key) || null;
    }
    static dataString(facets, key) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ContentDataStringValueFacetResult, Relewise.Client', key);
    }
    static dataBoolean(facets, key) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ContentDataBooleanValueFacetResult, Relewise.Client', key);
    }
    static dataNumber(facets, key) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ContentDataDoubleValueFacetResult, Relewise.Client', key);
    }
    static dataObject(facets, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'ContentDataObjectFacetResult' &&
            'key' in item &&
            item.key === key) || null;
    }
    static data(facets, $type, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return (facets.items.find((a) => a.$type === $type &&
            a.field === 'Data' &&
            'key' in a && a.key === key) || null);
    }
}

class GetProductCategoryFacet {
    constructor(items) {
        this.items = items;
    }
    static assortment(facets) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Assortment' &&
            item.$type === 'ProductCategoryAssortmentFacetResult') || null;
    }
    static dataDoubleRange(facets, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'ProductCategoryDataDoubleRangeFacetResult' &&
            'key' in item &&
            item.key === key) || null;
    }
    static dataDoubleRanges(facets, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'ProductCategoryDataDoubleRangesFacetResult' &&
            'key' in item &&
            item.key === key) || null;
    }
    static dataString(facets, key) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ProductCategoryDataStringValueFacetResult, Relewise.Client', key);
    }
    static dataBoolean(facets, key) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ProductCategoryDataBooleanValueFacetResult, Relewise.Client', key);
    }
    static dataNumber(facets, key) {
        return this.data(facets, 'Relewise.Client.DataTypes.Search.Facets.Result.ProductCategoryDataDoubleValueFacetResult, Relewise.Client', key);
    }
    static dataObject(facets, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return facets.items.find((item) => item.field === 'Data' &&
            item.$type === 'ProductCategoryDataObjectFacetResult' &&
            'key' in item &&
            item.key === key) || null;
    }
    static data(facets, $type, key) {
        if (!(facets === null || facets === void 0 ? void 0 : facets.items))
            return null;
        return (facets.items.find((a) => a.$type === $type &&
            a.field === 'Data' &&
            'key' in a && a.key === key) || null);
    }
}

class RecommendationRequestBuilder {
    constructor(settings) {
        this.settings = settings;
        this.filterBuilder = new FilterBuilder();
        this.relevanceModifiersBuilder = new RelevanceModifierBuilder();
    }
    /**
     * Adds filters to the request
     * @param filterBuilder
     * @returns
     */
    filters(filterBuilder) {
        filterBuilder(this.filterBuilder);
        return this;
    }
    relevanceModifiers(relevanceModifiersBuilder) {
        relevanceModifiersBuilder(this.relevanceModifiersBuilder);
        return this;
    }
    baseBuild() {
        var _a, _b;
        return {
            currency: { value: this.settings.currency },
            user: this.settings.user,
            language: { value: this.settings.language },
            displayedAtLocationType: this.settings.displayedAtLocation,
            filters: (_a = this.filterBuilder.build()) !== null && _a !== void 0 ? _a : {},
            relevanceModifiers: (_b = this.relevanceModifiersBuilder.build()) !== null && _b !== void 0 ? _b : {},
        };
    }
}

class ContentSettingsRecommendationBuilder extends RecommendationRequestBuilder {
    constructor(settings) {
        super(settings);
        this.recommendationSettings = {
            allowFillIfNecessaryToReachNumberOfRecommendations: true,
            allowReplacingOfRecentlyShownRecommendations: true,
            numberOfRecommendations: 10,
            prioritizeDiversityBetweenRequests: false,
        };
    }
    /**
     * Select the properties of the content to be returned, by default only the content id is returned.
     * @param contentProperties
     */
    setSelectedContentProperties(contentProperties) {
        this.recommendationSettings.selectedContentProperties = contentProperties;
        return this;
    }
    setNumberOfRecommendations(count) {
        this.recommendationSettings.numberOfRecommendations = count;
        return this;
    }
    allowFillIfNecessaryToReachNumberOfRecommendations(allowed = true) {
        this.recommendationSettings.allowFillIfNecessaryToReachNumberOfRecommendations = allowed;
        return this;
    }
    allowReplacingOfRecentlyShownRecommendations(allowed = true) {
        this.recommendationSettings.allowReplacingOfRecentlyShownRecommendations = allowed;
        return this;
    }
    prioritizeDiversityBetweenRequests(prioritize = true) {
        this.recommendationSettings.prioritizeDiversityBetweenRequests = prioritize;
        return this;
    }
}

class ContentsRecommendationCollectionBuilder {
    constructor() {
        this.requests = [];
        this.distinctContentsAcrossResults = true;
    }
    addRequest(request) {
        this.requests.push(request);
        return this;
    }
    requireDistinctContentsAcrossResults(distinctContentsAcrossResults = true) {
        this.distinctContentsAcrossResults = distinctContentsAcrossResults;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.Requests.Recommendations.ContentRecommendationRequestCollection, Relewise.Client',
            requireDistinctContentsAcrossResults: this.distinctContentsAcrossResults,
            requests: this.requests,
        };
    }
}

class ContentsViewedAfterViewingContentBuilder extends ContentSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.id = '';
    }
    setContentId(contentId) {
        this.id = contentId;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.ContentsViewedAfterViewingContentRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, contentId: this.id });
        return request;
    }
}

class ContentsViewedAfterViewingMultipleContentsBuilder extends ContentSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.ids = [];
    }
    setContentIds(...ids) {
        this.ids = ids;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.ContentsViewedAfterViewingMultipleContentsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, contentIds: this.ids });
        return request;
    }
}

class ContentsViewedAfterViewingMultipleProductsBuilder extends ContentSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.products = [];
    }
    addProduct(product) {
        this.products.push(product);
        return this;
    }
    addProducts(products) {
        products.forEach(x => this.products.push(x));
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.ContentsViewedAfterViewingMultipleProductsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, productAndVariantIds: this.products });
        return request;
    }
}

class ContentsViewedAfterViewingProductBuilder extends ContentSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.productAndVariantId = {
            productId: '',
        };
    }
    product(product) {
        this.productAndVariantId = product;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.ContentsViewedAfterViewingProductRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, productAndVariantId: this.productAndVariantId });
        return request;
    }
}

class PersonalContentRecommendationBuilder extends ContentSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PersonalContentRecommendationRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings });
        return request;
    }
}

class PopularContentsBuilder extends ContentSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PopularContentsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, sinceMinutesAgo: this.since });
        return request;
    }
}

class ContentCategoriesRecommendationCollectionBuilder {
    constructor() {
        this.requests = [];
        this.distinctCategoriesAcrossResults = true;
    }
    addRequest(request) {
        this.requests.push(request);
        return this;
    }
    requireDistinctCategoriesAcrossResults(distinctCategoriesAcrossResults = true) {
        this.distinctCategoriesAcrossResults = distinctCategoriesAcrossResults;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.Requests.Recommendations.ContentRecommendationRequestCollection, Relewise.Client',
            requireDistinctCategoriesAcrossResults: this.distinctCategoriesAcrossResults,
            requests: this.requests,
        };
    }
}

class ContentCategorySettingsRecommendationBuilder extends RecommendationRequestBuilder {
    constructor(settings) {
        super(settings);
        this.recommendationSettings = {
            allowFillIfNecessaryToReachNumberOfRecommendations: true,
            allowReplacingOfRecentlyShownRecommendations: true,
            numberOfRecommendations: 10,
            prioritizeDiversityBetweenRequests: false,
        };
    }
    /**
     * Select the properties of the content category to be returned, by default only the content category id is returned.
     * @param contentCategoryProperties
     */
    setSelectedContentCategoryProperties(contentCategoryProperties) {
        this.recommendationSettings.selectedContentCategoryProperties = contentCategoryProperties;
        return this;
    }
    setNumberOfRecommendations(count) {
        this.recommendationSettings.numberOfRecommendations = count;
        return this;
    }
    allowFillIfNecessaryToReachNumberOfRecommendations(allowed = true) {
        this.recommendationSettings.allowFillIfNecessaryToReachNumberOfRecommendations = allowed;
        return this;
    }
    allowReplacingOfRecentlyShownRecommendations(allowed = true) {
        this.recommendationSettings.allowReplacingOfRecentlyShownRecommendations = allowed;
        return this;
    }
    prioritizeDiversityBetweenRequests(prioritize = true) {
        this.recommendationSettings.prioritizeDiversityBetweenRequests = prioritize;
        return this;
    }
}

class PersonalContentCategoryRecommendationBuilder extends ContentCategorySettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
        this.weights = { categoryViews: 1.0, contentViews: 1.0 };
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    setWeights(weights) {
        this.weights = weights;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PersonalContentCategoryRecommendationRequest, Relewise.Client' }, this.baseBuild()), { sinceMinutesAgo: this.since, weights: this.weights, settings: this.recommendationSettings });
        return request;
    }
}

class PopularContentCategoriesRecommendationBuilder extends ContentCategorySettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
        this.weights = { categoryViews: 1.0, contentViews: 1.0 };
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    setWeights(weights) {
        this.weights = weights;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PopularContentCategoriesRecommendationRequest, Relewise.Client' }, this.baseBuild()), { sinceMinutesAgo: this.since, weights: this.weights, settings: this.recommendationSettings });
        return request;
    }
}

class BrandSettingsRecommendationBuilder extends RecommendationRequestBuilder {
    constructor(settings) {
        super(settings);
        this.recommendationSettings = {
            allowFillIfNecessaryToReachNumberOfRecommendations: true,
            allowReplacingOfRecentlyShownRecommendations: true,
            numberOfRecommendations: 10,
            prioritizeDiversityBetweenRequests: false,
        };
    }
    /**
     * Select the properties of the brand to be returned, by default only the brand id is returned.
     * @param brandProperties
     */
    setSelectedBrandProperties(brandProperties) {
        this.recommendationSettings.selectedBrandProperties = brandProperties;
        return this;
    }
    setNumberOfRecommendations(count) {
        this.recommendationSettings.numberOfRecommendations = count;
        return this;
    }
    allowFillIfNecessaryToReachNumberOfRecommendations(allowed = true) {
        this.recommendationSettings.allowFillIfNecessaryToReachNumberOfRecommendations = allowed;
        return this;
    }
    allowReplacingOfRecentlyShownRecommendations(allowed = true) {
        this.recommendationSettings.allowReplacingOfRecentlyShownRecommendations = allowed;
        return this;
    }
    prioritizeDiversityBetweenRequests(prioritize = true) {
        this.recommendationSettings.prioritizeDiversityBetweenRequests = prioritize;
        return this;
    }
}

class PersonalBrandRecommendationBuilder extends BrandSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
        this.weights = { brandViews: 1.0, productViews: 1.0, productPurchases: 1.0 };
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    setWeights(weights) {
        this.weights = weights;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PersonalBrandRecommendationRequest, Relewise.Client' }, this.baseBuild()), { sinceMinutesAgo: this.since, weights: this.weights, settings: this.recommendationSettings });
        return request;
    }
}

class PopularBrandsRecommendationBuilder extends BrandSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
        this.weights = { brandViews: 1.0, productViews: 1.0, productPurchases: 1.0 };
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    setWeights(weights) {
        this.weights = weights;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PopularBrandsRecommendationRequest, Relewise.Client' }, this.baseBuild()), { sinceMinutesAgo: this.since, weights: this.weights, settings: this.recommendationSettings });
        return request;
    }
}

class ProductCategorySettingsRecommendationBuilder extends RecommendationRequestBuilder {
    constructor(settings) {
        super(settings);
        this.recommendationSettings = {
            allowFillIfNecessaryToReachNumberOfRecommendations: true,
            allowReplacingOfRecentlyShownRecommendations: true,
            numberOfRecommendations: 10,
            prioritizeDiversityBetweenRequests: false,
        };
    }
    setProductCategoryProperties(ProductCategoryProperties) {
        this.recommendationSettings.selectedProductCategoryProperties = ProductCategoryProperties;
        return this;
    }
    setNumberOfRecommendations(count) {
        this.recommendationSettings.numberOfRecommendations = count;
        return this;
    }
    allowFillIfNecessaryToReachNumberOfRecommendations(allowed = true) {
        this.recommendationSettings.allowFillIfNecessaryToReachNumberOfRecommendations = allowed;
        return this;
    }
    allowReplacingOfRecentlyShownRecommendations(allowed = true) {
        this.recommendationSettings.allowReplacingOfRecentlyShownRecommendations = allowed;
        return this;
    }
    prioritizeDiversityBetweenRequests(prioritize = true) {
        this.recommendationSettings.prioritizeDiversityBetweenRequests = prioritize;
        return this;
    }
}

class PersonalProductCategoryRecommendationBuilder extends ProductCategorySettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
        this.weights = { categoryViews: 1.0, productViews: 1.0, productPurchases: 1.0 };
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    setWeights(weights) {
        this.weights = weights;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PersonalProductCategoryRecommendationRequest, Relewise.Client' }, this.baseBuild()), { sinceMinutesAgo: this.since, weights: this.weights, settings: this.recommendationSettings });
        return request;
    }
}

class PopularProductCategoriesRecommendationBuilder extends ProductCategorySettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
        this.weights = { categoryViews: 1.0, productViews: 1.0, productPurchases: 1.0 };
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    setWeights(weights) {
        this.weights = weights;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PopularProductCategoriesRecommendationRequest, Relewise.Client' }, this.baseBuild()), { sinceMinutesAgo: this.since, weights: this.weights, settings: this.recommendationSettings });
        return request;
    }
}

class ProductCategoriesRecommendationCollectionBuilder {
    constructor() {
        this.requests = [];
        this.distinctCategoriesAcrossResults = true;
    }
    addRequest(request) {
        this.requests.push(request);
        return this;
    }
    requireDistinctCategoriesAcrossResults(distinctCategoriesAcrossResults = true) {
        this.distinctCategoriesAcrossResults = distinctCategoriesAcrossResults;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.Requests.Recommendations.ProductCategoryRecommendationRequestCollection, Relewise.Client',
            requireDistinctCategoriesAcrossResults: this.distinctCategoriesAcrossResults,
            requests: this.requests,
        };
    }
}

class ProductSettingsRecommendationBuilder extends RecommendationRequestBuilder {
    constructor(settings) {
        super(settings);
        this.recommendationSettings = {
            allowFillIfNecessaryToReachNumberOfRecommendations: true,
            allowReplacingOfRecentlyShownRecommendations: true,
            recommendVariant: true,
            numberOfRecommendations: 10,
            prioritizeDiversityBetweenRequests: false,
        };
    }
    /**
     * Select the properties of the product to be returned, by default only the product id is returned.
     * @param productProperties
     */
    setSelectedProductProperties(productProperties) {
        this.recommendationSettings.selectedProductProperties = productProperties;
        return this;
    }
    /**
    * Select the properties of the variant to be returned, by default only the variant id is returned.
    * @param variantProperties
    */
    setSelectedVariantProperties(variantProperties) {
        this.recommendationSettings.selectedVariantProperties = variantProperties;
        return this;
    }
    /**
     * Select the properties of the brand to be returned, by default only the brand id is returned.
     * @param brandProperties
     */
    setSelectedBrandProperties(brandProperties) {
        this.recommendationSettings.selectedBrandProperties = brandProperties;
        return this;
    }
    setNumberOfRecommendations(count) {
        this.recommendationSettings.numberOfRecommendations = count;
        return this;
    }
    allowFillIfNecessaryToReachNumberOfRecommendations(allowed = true) {
        this.recommendationSettings.allowFillIfNecessaryToReachNumberOfRecommendations = allowed;
        return this;
    }
    allowReplacingOfRecentlyShownRecommendations(allowed = true) {
        this.recommendationSettings.allowReplacingOfRecentlyShownRecommendations = allowed;
        return this;
    }
    allowProductsCurrentlyInCart(allowed = true) {
        this.recommendationSettings.allowProductsCurrentlyInCart = allowed;
        return this;
    }
    prioritizeDiversityBetweenRequests(prioritize = true) {
        this.recommendationSettings.prioritizeDiversityBetweenRequests = prioritize;
        return this;
    }
    recommendVariant(recommend = true) {
        this.recommendationSettings.recommendVariant = recommend;
        return this;
    }
}

class PurchasedWithCurrentCartBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PurchasedWithCurrentCartRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings });
        return request;
    }
}

class BySingleProductRecommendationBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.productAndVariantId = null;
    }
    product(product) {
        this.productAndVariantId = product;
        return this;
    }
}

class ProductsViewedAfterViewingProductBuilder extends BySingleProductRecommendationBuilder {
    constructor(settings) {
        super(settings);
    }
    build() {
        if (this.productAndVariantId === null) {
            throw new Error('Must specificy a product');
        }
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.ProductsViewedAfterViewingProductRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, productAndVariantId: this.productAndVariantId });
        return request;
    }
}

class ProductsViewedAfterViewingContentBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.id = '';
    }
    setContentId(contentId) {
        this.id = contentId;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.ProductsViewedAfterViewingContentRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, contentId: this.id });
        return request;
    }
}

class PersonalProductRecommendationBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PersonalProductRecommendationRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings });
        return request;
    }
}

class PopularityMultiplierBuilder {
    constructor() {
        this.popularityMultiplierSelector = null;
    }
    setDataKeyPopularityMultiplierSelector(selector) {
        const dataKeyPopularityMultiplierSelector = Object.assign({ $type: 'Relewise.Client.Requests.PopularityMultiplierSelectors.DataKeyPopularityMultiplierSelector, Relewise.Client' }, selector);
        this.popularityMultiplierSelector = dataKeyPopularityMultiplierSelector;
        return this;
    }
    build() {
        return this.popularityMultiplierSelector;
    }
}

class PopularProductsBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.since = 0;
        this.basedOnSelection = 'MostPurchased';
        this.popularityMultiplierBuilder = new PopularityMultiplierBuilder();
    }
    basedOn(basedOn) {
        this.basedOnSelection = basedOn;
        return this;
    }
    sinceMinutesAgo(sinceMinutesAgo) {
        this.since = sinceMinutesAgo;
        return this;
    }
    setPopularityMultiplier(popularityMultiplierBuilder) {
        popularityMultiplierBuilder(this.popularityMultiplierBuilder);
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PopularProductsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, basedOn: this.basedOnSelection, sinceMinutesAgo: this.since, popularityMultiplier: this.popularityMultiplierBuilder.build() });
        return request;
    }
}

class RecentlyViewedProductsBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.RecentlyViewedProductsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings });
        return request;
    }
}

class SortVariantsBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.id = '';
    }
    setProductId(productId) {
        this.id = productId;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.SortVariantsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, productId: this.id });
        return request;
    }
}

class ProductsRecommendationCollectionBuilder {
    constructor() {
        this.requests = [];
        this.distinctProductsAcrossResults = true;
    }
    addRequest(request) {
        this.requests.push(request);
        return this;
    }
    requireDistinctProductsAcrossResults(distinctProductsAcrossResults = true) {
        this.distinctProductsAcrossResults = distinctProductsAcrossResults;
        return this;
    }
    build() {
        return {
            $type: 'Relewise.Client.Requests.Recommendations.ProductRecommendationRequestCollection, Relewise.Client',
            requireDistinctProductsAcrossResults: this.distinctProductsAcrossResults,
            requests: this.requests,
        };
    }
}

class PurchasedWithMultipleProductsBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.products = [];
    }
    addProduct(product) {
        this.products.push(product);
        return this;
    }
    addProducts(products) {
        products.forEach(x => this.products.push(x));
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PurchasedWithMultipleProductsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, productAndVariantIds: this.products });
        return request;
    }
}

class PurchasedWithProductBuilder extends BySingleProductRecommendationBuilder {
    constructor(settings) {
        super(settings);
    }
    build() {
        if (this.productAndVariantId === null) {
            throw new Error('Must specificy a product');
        }
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PurchasedWithProductRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, productAndVariantId: this.productAndVariantId });
        return request;
    }
}

class SearchTermBasedProductRecommendationBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.term = '';
    }
    setTerm(term) {
        this.term = term;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.SearchTermBasedProductRecommendationRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, term: this.term });
        return request;
    }
}

class SortProductsBuilder extends ProductSettingsRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.ids = [];
    }
    setProductIds(productIds) {
        this.ids = productIds;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.SortProductsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, productIds: this.ids });
        return request;
    }
}

class SimilarProductsProductBuilder extends BySingleProductRecommendationBuilder {
    constructor(settings) {
        super(settings);
        this.evaluationSettings = null;
        this.considerAlreadyKnownInformationAboutProduct = false;
        this.productData = null;
    }
    /** @deprecated
     * Use setEvaluationSettings instead
     */
    setSimilarProductsEvaluationSettings(settings) {
        this.evaluationSettings = settings;
        return this;
    }
    setEvaluationSettings(builder) {
        const cleanSettings = {
            significanceOfSimilaritiesInDisplayName: 0,
            productDisplayNameTransformer: null,
            significanceOfSimilarListPrice: 0,
            significanceOfCommonImmediateParentCategories: 0,
            significanceOfCommonParentsParentCategories: 0,
            significanceOfCommonAncestorCategories: 0,
            significanceOfCommonProductDataKeys: 0,
            significanceOfIdenticalProductDataValues: 0,
            significantProductDataFields: null,
            significanceOfSimilarSalesPrice: 0,
            significanceOfSimilarBrand: 0,
            variantEvaluationSettings: null,
        };
        builder(cleanSettings);
        this.evaluationSettings = cleanSettings;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.SimilarProductsRequest, Relewise.Client' }, this.baseBuild()), { settings: this.recommendationSettings, existingProductId: this.productAndVariantId, considerAlreadyKnownInformationAboutProduct: this.considerAlreadyKnownInformationAboutProduct, productData: this.productData, evaluationSettings: this.evaluationSettings });
        return request;
    }
}

class PopularSearchTermsRecommendationBuilder extends RecommendationRequestBuilder {
    constructor(settings) {
        super(settings);
        this.recommendationSettings = {
            numberOfRecommendations: 10,
        };
    }
    setTerm(term) {
        this.term = term;
        return this;
    }
    addEntityType(...types) {
        this.recommendationSettings.targetEntityTypes = types;
        return this;
    }
    build() {
        const request = Object.assign(Object.assign({ $type: 'Relewise.Client.Requests.Recommendations.PopularSearchTermsRecommendationRequest, Relewise.Client' }, this.baseBuild()), { term: this.term, settings: this.recommendationSettings });
        return request;
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var version = { tag: 'client@2.0.0' };

class ProblemDetailsError extends Error {
    constructor(message, details) {
        super(message);
        this._details = details;
    }
    get details() {
        return this._details;
    }
}
class RelewiseClient {
    constructor(datasetId, apiKey, options) {
        this.datasetId = datasetId;
        this.apiKey = apiKey;
        this._serverUrl = 'https://api.relewise.com';
        this._urlPath = 'v1';
        if (!datasetId)
            throw new Error('Dataset id cannot be null or empty. Please contact Relewise if you don\'t have an account already or would like a free demo license');
        if (!apiKey)
            throw new Error('API Key secret cannot be null or empty. Please contact Relewise support if you don\'t know the apiKeySecret for your datasetId.');
        this._apiKeyHeader = `APIKey ${this.apiKey}`;
        if (options === null || options === void 0 ? void 0 : options.serverUrl) {
            this._serverUrl = options.serverUrl;
        }
    }
    get serverUrl() {
        return this._serverUrl;
    }
    request(name, data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestUrl = this.createRequestUrl(this._serverUrl, this.datasetId, this._urlPath, name);
            const response = yield fetch(requestUrl, {
                method: 'POST',
                headers: {
                    Authorization: this._apiKeyHeader,
                    'Content-Type': 'application/json',
                    'X-Relewise-Version': version.tag,
                },
                body: JSON.stringify(data),
                signal: options === null || options === void 0 ? void 0 : options.abortSignal,
                cache: 'no-cache',
            });
            if (!response.ok) {
                let responseMessage = null;
                try {
                    responseMessage = yield response.json();
                }
                catch (_) {
                }
                const details = (responseMessage === null || responseMessage === void 0 ? void 0 : responseMessage.detail) ? `Details: ${responseMessage.detail}\n` : '';
                throw new ProblemDetailsError(`Error when calling the Relewise API.\n\nTitle: ${response.statusText}\nStatus: ${response.status}\n${details}\nRead more in the details property if there is error response or look in the network tab.`, responseMessage);
            }
            try {
                const responseMessage = yield response.json();
                return responseMessage;
            }
            catch (err) {
                return undefined;
            }
        });
    }
    createRequestUrl(baseUrl, ...segments) {
        const joinedSegments = segments.join('/');
        return baseUrl.endsWith('/')
            ? baseUrl.concat(joinedSegments)
            : baseUrl.concat('/', joinedSegments);
    }
}

class Tracker extends RelewiseClient {
    constructor(datasetId, apiKey, options) {
        super(datasetId, apiKey, options);
        this.datasetId = datasetId;
        this.apiKey = apiKey;
    }
    trackOrder({ user, subtotal, orderNumber, lineItems, cartName = 'default', trackingNumber, data }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackOrderRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackOrderRequest, Relewise.Client',
                order: {
                    $type: 'Relewise.Client.DataTypes.Order, Relewise.Client',
                    lineItems: lineItems.map(l => (Object.assign(Object.assign({ product: {
                            id: l.productId,
                        } }, (l.variantId && { variant: { id: l.variantId } })), { lineTotal: l.lineTotal, quantity: l.quantity, data: l.data }))),
                    subtotal: { amount: subtotal.amount, currency: { value: subtotal.currency } },
                    orderNumber: orderNumber,
                    trackingNumber: trackingNumber,
                    cartName: cartName,
                    data: data,
                    user: user,
                },
            }, options);
        });
    }
    trackCart({ user, subtotal, lineItems, data, cartName = 'default' }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackCartRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackCartRequest, Relewise.Client',
                cart: {
                    $type: 'Relewise.Client.DataTypes.Cart, Relewise.Client',
                    lineItems: lineItems.map(l => (Object.assign(Object.assign({ product: {
                            id: l.productId,
                        } }, (l.variantId && { variant: { id: l.variantId } })), { lineTotal: l.lineTotal, quantity: l.quantity, data: l.data }))),
                    subtotal: { amount: subtotal.amount, currency: { value: subtotal.currency } },
                    name: cartName,
                    user: user,
                    data: data,
                },
            }, options);
        });
    }
    trackProductView({ productId, variantId, user }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackProductViewRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackProductViewRequest, Relewise.Client',
                productView: Object.assign(Object.assign({ $type: 'Relewise.Client.DataTypes.ProductView, Relewise.Client', product: {
                        id: productId,
                    } }, (variantId && { variant: { id: variantId } })), { user: user }),
            }, options);
        });
    }
    trackProductCategoryView({ idPath, user }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackProductCategoryViewRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackProductCategoryViewRequest, Relewise.Client',
                productCategoryView: {
                    $type: 'Relewise.Client.DataTypes.ProductCategoryView, Relewise.Client',
                    idPath: idPath,
                    user: user,
                },
            }, options);
        });
    }
    trackContentView({ contentId, user }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackContentViewRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackContentViewRequest, Relewise.Client',
                contentView: {
                    $type: 'Relewise.Client.DataTypes.ContentView, Relewise.Client',
                    content: {
                        id: contentId,
                    },
                    user: user,
                },
            }, options);
        });
    }
    trackContentCategoryView({ idPath, user }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackContentCategoryViewRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackContentCategoryViewRequest, Relewise.Client',
                contentCategoryView: {
                    $type: 'Relewise.Client.DataTypes.ContentCategoryView, Relewise.Client',
                    idPath: idPath,
                    user: user,
                },
            }, options);
        });
    }
    trackBrandView({ brandId, user }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackBrandViewRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackBrandViewRequest, Relewise.Client',
                brandView: {
                    $type: 'Relewise.Client.DataTypes.BrandView, Relewise.Client',
                    brand: {
                        id: brandId,
                    },
                    user: user,
                },
            }, options);
        });
    }
    trackSearchTerm({ term, language, user }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackSearchTermRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackSearchTermRequest, Relewise.Client',
                searchTerm: {
                    $type: 'Relewise.Client.DataTypes.SearchTerm, Relewise.Client',
                    language: {
                        value: language,
                    },
                    term: term,
                    user: user,
                },
            }, options);
        });
    }
    trackUserUpdate({ user, updateKind = 'UpdateAndAppend' }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('TrackUserUpdateRequest', {
                $type: 'Relewise.Client.Requests.Tracking.TrackUserUpdateRequest, Relewise.Client',
                userUpdate: {
                    $type: 'Relewise.Client.DataTypes.UserUpdate, Relewise.Client',
                    user: user,
                    kind: updateKind,
                },
            }, options);
        });
    }
}

class Searcher extends RelewiseClient {
    constructor(datasetId, apiKey, options) {
        super(datasetId, apiKey, options);
        this.datasetId = datasetId;
        this.apiKey = apiKey;
    }
    searchProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ProductSearchRequest', request, options);
        });
    }
    searchProductCategories(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ProductCategorySearchRequest', request, options);
        });
    }
    searchContents(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ContentSearchRequest', request, options);
        });
    }
    searchTermPrediction(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('SearchTermPredictionRequest', request, options);
        });
    }
    batch(requestCollections, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('SearchRequestCollection', requestCollections, options);
        });
    }
}

class Recommender extends RelewiseClient {
    constructor(datasetId, apiKey, options) {
        super(datasetId, apiKey, options);
        this.datasetId = datasetId;
        this.apiKey = apiKey;
    }
    recommendPopularSearchTerms(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PopularSearchTermsRecommendationRequest', request, options);
        });
    }
    //#region Brands
    recommendPersonalBrands(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PersonalBrandRecommendationRequest', request, options);
        });
    }
    recommendPopularBrands(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PopularBrandsRecommendationRequest', request, options);
        });
    }
    //#endregion
    //#region Content Categories
    recommendPersonalContentCategories(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PersonalContentCategoryRecommendationRequest', request, options);
        });
    }
    recommendPopularContentCategories(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PopularContentCategoriesRecommendationRequest', request, options);
        });
    }
    //#endregion
    //#region Product Categories
    recommendPersonalProductCategories(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PersonalProductCategoryRecommendationRequest', request, options);
        });
    }
    recommendPopularProductCategories(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PopularProductCategoriesRecommendationRequest', request, options);
        });
    }
    //#endregion
    //#region Products
    recommendPurchasedWithProduct(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PurchasedWithProductRequest', request, options);
        });
    }
    recommendPurchasedWithMultipleProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PurchasedWithMultipleProductsRequest', request, options);
        });
    }
    sortVariants(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('SortVariantsRequest', request, options);
        });
    }
    sortProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('SortProductsRequest', request, options);
        });
    }
    recommendSimilarProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('SimilarProductsRequest', request, options);
        });
    }
    recommendSearchTermBasedProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('SearchTermBasedProductRecommendationRequest', request, options);
        });
    }
    recentlyViewedProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('RecentlyViewedProductsRequest', request, options);
        });
    }
    recommendPurchasedWithCurrentCart(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PurchasedWithCurrentCartRequest', request, options);
        });
    }
    recommendProductsViewedAfterViewingProduct(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ProductsViewedAfterViewingProductRequest', request, options);
        });
    }
    recommendProductsViewedAfterViewingContent(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ProductsViewedAfterViewingContentRequest', request, options);
        });
    }
    recommendPopularProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PopularProductsRequest', request, options);
        });
    }
    recommendPersonalProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PersonalProductRecommendationRequest', request, options);
        });
    }
    //#endregion
    //#region Content
    recommendPopularContents(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PopularContentsRequest', request, options);
        });
    }
    recommendPersonalContents(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PopularContentsRequest', request, options);
        });
    }
    recommendContentsViewedAfterViewingProduct(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ContentsViewedAfterViewingProductRequest', request, options);
        });
    }
    recommendContentsViewedAfterViewingMultipleProducts(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ContentsViewedAfterViewingProductRequest', request, options);
        });
    }
    recommendContentsViewedAfterViewingMultipleContents(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ContentsViewedAfterViewingMultipleContentsRequest', request, options);
        });
    }
    recommendContentsViewedAfterViewingContent(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ContentsViewedAfterViewingContentRequest', request, options);
        });
    }
    //#endregion
    //#region Batching 
    batchProductRecommendations(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ProductRecommendationRequestCollection', request, options);
        });
    }
    batchContentRecommendations(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ContentRecommendationRequestCollection', request, options);
        });
    }
    batchContentCategoryRecommendations(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ContentCategoryRecommendationRequestCollection', request, options);
        });
    }
    batchProductCategoryRecommendations(request, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('ProductCategoryRecommendationRequestCollection', request, options);
        });
    }
}

class UserFactory {
    static anonymous(user) {
        return Object.assign({}, user);
    }
    static byAuthenticatedId(authenticatedId, temporaryId, user) {
        return Object.assign(Object.assign({ authenticatedId }, (temporaryId && { temporaryId })), user);
    }
    static byTemporaryId(temporaryId, user) {
        return Object.assign(Object.assign({}, user), { temporaryId });
    }
    static byIdentifier(key, value, user) {
        return Object.assign(Object.assign({}, user), { identifiers: { [key]: value } });
    }
    static byIdentifiers(identifiers, user) {
        return Object.assign({ identifiers }, user);
    }
    static byEmail(email, user) {
        return Object.assign({ email }, user);
    }
    static byFingerprint(fingerprint, user) {
        return Object.assign({ fingerprint }, user);
    }
}

class DataValueFactory {
    static string(value) {
        return new StringDataValue(value);
    }
    static stringCollection(collection) {
        return new StringCollectionDataValue(collection);
    }
    static number(value) {
        return new NumberDataValue(value);
    }
    static doubleCollection(collection) {
        return new DoubleCollectionDataValue(collection);
    }
    static boolean(value) {
        return new BooleanDataValue(value);
    }
    static booleanCollection(collection) {
        return new BooleanCollectionDataValue(collection);
    }
    static multiCurrency(values) {
        return new MultiCurrencyDataValue(values);
    }
    static multilingual(values) {
        return new MultilingualDataValue(values);
    }
    static multilingualCollection(values) {
        return new MultilingualCollectionDataValue(values);
    }
    static object(data) {
        return new ObjectDataValue(data);
    }
    static objectCollection(objects) {
        return new ObjectCollectionDataValue(objects);
    }
}

class ValueSelectorFactory {
    static dataDoubleSelector(key) {
        return {
            $type: 'Relewise.Client.Requests.ValueSelectors.DataDoubleSelector, Relewise.Client',
            key: key,
        };
    }
    static fixedDoubleValueSelector(value) {
        return {
            $type: 'Relewise.Client.Requests.ValueSelectors.FixedDoubleValueSelector, Relewise.Client',
            value: value,
        };
    }
}

exports.BooleanCollectionDataValue = BooleanCollectionDataValue;
exports.BooleanDataValue = BooleanDataValue;
exports.BrandFilterBuilder = BrandFilterBuilder;
exports.BrandSettingsRecommendationBuilder = BrandSettingsRecommendationBuilder;
exports.BySingleProductRecommendationBuilder = BySingleProductRecommendationBuilder;
exports.CompanyFilterBuilder = CompanyFilterBuilder;
exports.ConditionBuilder = ConditionBuilder;
exports.ContentCategoriesRecommendationCollectionBuilder = ContentCategoriesRecommendationCollectionBuilder;
exports.ContentCategorySettingsRecommendationBuilder = ContentCategorySettingsRecommendationBuilder;
exports.ContentFilterBuilder = ContentFilterBuilder;
exports.ContentSearchBuilder = ContentSearchBuilder;
exports.ContentSettingsRecommendationBuilder = ContentSettingsRecommendationBuilder;
exports.ContentSortingBuilder = ContentSortingBuilder;
exports.ContentsRecommendationCollectionBuilder = ContentsRecommendationCollectionBuilder;
exports.ContentsViewedAfterViewingContentBuilder = ContentsViewedAfterViewingContentBuilder;
exports.ContentsViewedAfterViewingMultipleContentsBuilder = ContentsViewedAfterViewingMultipleContentsBuilder;
exports.ContentsViewedAfterViewingMultipleProductsBuilder = ContentsViewedAfterViewingMultipleProductsBuilder;
exports.ContentsViewedAfterViewingProductBuilder = ContentsViewedAfterViewingProductBuilder;
exports.DataObjectFacetBuilder = DataObjectFacetBuilder;
exports.DataObjectFilterConditionBuilder = DataObjectFilterConditionBuilder;
exports.DataObjectValueSelectorBuilder = DataObjectValueSelectorBuilder;
exports.DataValueBase = DataValueBase;
exports.DataValueFactory = DataValueFactory;
exports.DoubleCollectionDataValue = DoubleCollectionDataValue;
exports.FacetBuilder = FacetBuilder;
exports.FilterBuilder = FilterBuilder;
exports.FilterBuilderBase = FilterBuilderBase;
exports.FilterScopesBuilder = FilterScopesBuilder;
exports.FilterSettingsBuilder = FilterSettingsBuilder;
exports.GetContentFacet = GetContentFacet;
exports.GetProductCategoryFacet = GetProductCategoryFacet;
exports.GetProductFacet = GetProductFacet;
exports.MultiCurrencyDataValue = MultiCurrencyDataValue;
exports.MultilingualCollectionDataValue = MultilingualCollectionDataValue;
exports.MultilingualDataValue = MultilingualDataValue;
exports.NumberDataValue = NumberDataValue;
exports.ObjectCollectionDataValue = ObjectCollectionDataValue;
exports.ObjectDataValue = ObjectDataValue;
exports.PaginationBuilder = PaginationBuilder;
exports.PersonalBrandRecommendationBuilder = PersonalBrandRecommendationBuilder;
exports.PersonalContentCategoryRecommendationBuilder = PersonalContentCategoryRecommendationBuilder;
exports.PersonalContentRecommendationBuilder = PersonalContentRecommendationBuilder;
exports.PersonalProductCategoryRecommendationBuilder = PersonalProductCategoryRecommendationBuilder;
exports.PersonalProductRecommendationBuilder = PersonalProductRecommendationBuilder;
exports.PopularBrandsRecommendationBuilder = PopularBrandsRecommendationBuilder;
exports.PopularContentCategoriesRecommendationBuilder = PopularContentCategoriesRecommendationBuilder;
exports.PopularContentsBuilder = PopularContentsBuilder;
exports.PopularProductCategoriesRecommendationBuilder = PopularProductCategoriesRecommendationBuilder;
exports.PopularProductsBuilder = PopularProductsBuilder;
exports.PopularSearchTermsRecommendationBuilder = PopularSearchTermsRecommendationBuilder;
exports.PopularityMultiplierBuilder = PopularityMultiplierBuilder;
exports.ProblemDetailsError = ProblemDetailsError;
exports.ProductCategoriesRecommendationCollectionBuilder = ProductCategoriesRecommendationCollectionBuilder;
exports.ProductCategorySearchBuilder = ProductCategorySearchBuilder;
exports.ProductCategorySettingsRecommendationBuilder = ProductCategorySettingsRecommendationBuilder;
exports.ProductCategorySortingBuilder = ProductCategorySortingBuilder;
exports.ProductFilterBuilder = ProductFilterBuilder;
exports.ProductSearchBuilder = ProductSearchBuilder;
exports.ProductSettingsRecommendationBuilder = ProductSettingsRecommendationBuilder;
exports.ProductSortingBuilder = ProductSortingBuilder;
exports.ProductsRecommendationCollectionBuilder = ProductsRecommendationCollectionBuilder;
exports.ProductsViewedAfterViewingContentBuilder = ProductsViewedAfterViewingContentBuilder;
exports.ProductsViewedAfterViewingProductBuilder = ProductsViewedAfterViewingProductBuilder;
exports.PurchasedWithCurrentCartBuilder = PurchasedWithCurrentCartBuilder;
exports.PurchasedWithMultipleProductsBuilder = PurchasedWithMultipleProductsBuilder;
exports.PurchasedWithProductBuilder = PurchasedWithProductBuilder;
exports.RecentlyViewedProductsBuilder = RecentlyViewedProductsBuilder;
exports.RecommendationRequestBuilder = RecommendationRequestBuilder;
exports.Recommender = Recommender;
exports.RelevanceModifierBuilder = RelevanceModifierBuilder;
exports.RelewiseClient = RelewiseClient;
exports.SearchCollectionBuilder = SearchCollectionBuilder;
exports.SearchConstraintBuilder = SearchConstraintBuilder;
exports.SearchRequestBuilder = SearchRequestBuilder;
exports.SearchTermBasedProductRecommendationBuilder = SearchTermBasedProductRecommendationBuilder;
exports.SearchTermPredictionBuilder = SearchTermPredictionBuilder;
exports.Searcher = Searcher;
exports.SimilarProductsProductBuilder = SimilarProductsProductBuilder;
exports.SortProductsBuilder = SortProductsBuilder;
exports.SortVariantsBuilder = SortVariantsBuilder;
exports.StringCollectionDataValue = StringCollectionDataValue;
exports.StringDataValue = StringDataValue;
exports.Tracker = Tracker;
exports.UserFactory = UserFactory;
exports.ValueSelectorFactory = ValueSelectorFactory;
exports.VariantFilterBuilder = VariantFilterBuilder;
//# sourceMappingURL=relewise-client.js.map
